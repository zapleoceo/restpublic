<?php
require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/ImageService.php';

class EventsService {
    private $client;
    private $db;
    private $eventsCollection;
    
    public function __construct() {
        try {
            $mongodbUrl = $_ENV['MONGODB_URL'] ?? 'mongodb://localhost:27018';
            $dbName = $_ENV['MONGODB_DB_NAME'] ?? 'northrepublic';
            
            $this->client = new MongoDB\Client($mongodbUrl);
            $this->db = $this->client->$dbName;
            $this->eventsCollection = $this->db->events;
        } catch (Exception $e) {
            error_log("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB –¥–ª—è —Å–æ–±—ã—Ç–∏–π: " . $e->getMessage());
            throw $e;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     */
    public function getCalendarDays($startDate = null, $daysCount = 7) {
        if (!$startDate) {
            $startDate = new DateTime();
        } else {
            $startDate = new DateTime($startDate);
        }
        
        $calendarDays = [];
        for ($i = 0; $i < $daysCount; $i++) {
            $currentDate = clone $startDate;
            $currentDate->add(new DateInterval('P' . $i . 'D'));
            
            $calendarDays[] = [
                'date' => $currentDate->format('Y-m-d'),
                'day' => $currentDate->format('d'),
                'month' => $this->getMonthShort($currentDate->format('m')),
                'full_date' => $currentDate->format('Y-m-d')
            ];
        }
        
        return $calendarDays;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–∞ N –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
     */
    public function getEventsForWidget($startDate = null, $days = 14, $language = 'ru') {
        try {
            if (!$startDate) {
                $startDate = new DateTime();
            } else {
                $startDate = new DateTime($startDate);
            }
            $startDate->setTime(0, 0, 0);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
            $endDate = clone $startDate;
            $endDate->add(new DateInterval('P' . $days . 'D'));
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            $events = $this->eventsCollection->find(
                [
                    'is_active' => true,
                    'date' => [
                        '$gte' => $startDate->format('Y-m-d'),
                        '$lte' => $endDate->format('Y-m-d')
                    ]
                ],
                [
                    'sort' => ['date' => 1, 'time' => 1]
                ]
            )->toArray();
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
            $formattedEvents = [];
            foreach ($events as $event) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
                $title = $this->getLocalizedField($event, 'title', $language);
                $description = $this->getLocalizedField($event, 'description', $language);
                $conditions = $this->getLocalizedField($event, 'conditions', $language);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                $imageUrl = '/images/event-default.png'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!empty($event['image'])) {
                    // –ï—Å–ª–∏ image —Å–æ–¥–µ—Ä–∂–∏—Ç file_id (GridFS), —Å–æ–∑–¥–∞–µ–º URL
                    if (preg_match('/^[a-f\d]{24}$/i', $event['image'])) {
                        $imageUrl = "/api/image.php?id=" . $event['image'];
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                        $imageUrl = $event['image'];
                    }
                }
                
                $formattedEvents[] = [
                    'id' => (string)$event['_id'],
                    'title' => $title,
                    'description' => $description,
                    'conditions' => $conditions,
                    'date' => $event['date'],
                    'time' => $event['time'] ?? '19:00',
                    'image' => $imageUrl,
                    'link' => $event['link'] ?? '#',
                    'category' => $event['category'] ?? 'general'
                ];
            }
            
            return $formattedEvents;
            
        } catch (Exception $e) {
            error_log("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: " . $e->getMessage());
            return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Å–æ–±—ã—Ç–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
     */
    private function getLocalizedField($event, $field, $language) {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        $localizedField = $field . '_' . $language;
        if (isset($event[$localizedField]) && !empty($event[$localizedField])) {
            return $event[$localizedField];
        }
        
        // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π)
        if ($language !== 'ru' && isset($event[$field . '_ru']) && !empty($event[$field . '_ru'])) {
            $russianText = $event[$field . '_ru'];
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–≥–æ
            if ($language === 'en' || $language === 'vi') {
                $translatedText = $this->autoTranslate($russianText, $language);
                if ($translatedText && $translatedText !== $russianText) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    $this->saveTranslation($event['_id'], $field, $language, $translatedText);
                    return $translatedText;
                }
            }
            
            return $russianText;
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –Ω–æ –Ω–µ—Ç –ø–æ–ª—è _ru, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
        if ($language === 'ru' && isset($event[$field]) && !empty($event[$field])) {
            return $event[$field];
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (isset($event[$field]) && !empty($event[$field])) {
            return $event[$field];
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        switch ($field) {
            case 'title':
                return '–°–æ–±—ã—Ç–∏–µ';
            case 'description':
                return '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è';
            case 'conditions':
                return '–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è';
            default:
                return '';
        }
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
     */
    private function autoTranslate($text, $targetLanguage) {
        // –°–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        $translations = [
            'en' => [
                'üé≠ –ú–∞—Ñ–∏—è' => 'üé≠ Mafia',
                '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –≤–∏–Ω' => 'Wine Tasting',
                '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –±–∞–Ω–∫–µ—Ç' => 'New Year Banquet',
                '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –ø–∞—Å—Ç—ã' => 'Pasta Cooking Master Class',
                '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω –Ω–∞ –î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞' => 'Romantic Valentine\'s Day Dinner',
                '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞' => 'Restaurant Birthday'
            ],
            'vi' => [
                'üé≠ –ú–∞—Ñ–∏—è' => 'üé≠ Mafia',
                '–î–µ–≥—É—Å—Ç–∞—Ü–∏—è –≤–∏–Ω' => 'N·∫øm th·ª≠ r∆∞·ª£u vang',
                '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –±–∞–Ω–∫–µ—Ç' => 'Ti·ªác t·∫•t ni√™n',
                '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –ø–∞—Å—Ç—ã' => 'L·ªõp h·ªçc n·∫•u m√¨ √ù',
                '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω –Ω–∞ –î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞' => 'B·ªØa t·ªëi l√£ng m·∫°n ng√†y Valentine',
                '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞' => 'Sinh nh·∫≠t nh√† h√†ng'
            ]
        ];
        
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        $translatedText = $text;
        if (isset($translations[$targetLanguage])) {
            foreach ($translations[$targetLanguage] as $ru => $translated) {
                $translatedText = str_replace($ru, $translated, $translatedText);
            }
        }
        
        return $translatedText;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private function saveTranslation($eventId, $field, $language, $translatedText) {
        try {
            $updateData = [
                $field . '_' . $language => $translatedText,
                'updated_at' => new MongoDB\BSON\UTCDateTime()
            ];
            
            $this->eventsCollection->updateOne(
                ['_id' => $eventId],
                ['$set' => $updateData]
            );
        } catch (Exception $e) {
            error_log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: " . $e->getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
     */
    private function getMonthShort($monthNumber) {
        $months = [
            1 => '—è–Ω–≤', 2 => '—Ñ–µ–≤', 3 => '–º–∞—Ä', 4 => '–∞–ø—Ä',
            5 => '–º–∞–π', 6 => '–∏—é–Ω', 7 => '–∏—é–ª', 8 => '–∞–≤–≥',
            9 => '—Å–µ–Ω', 10 => '–æ–∫—Ç', 11 => '–Ω–æ—è', 12 => '–¥–µ–∫'
        ];
        
        return $months[$monthNumber] ?? '—è–Ω–≤';
    }
    
}
?>
