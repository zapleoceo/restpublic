<?php

require_once 'SepayService.php';
require_once 'TelegramService.php';

class SepayNotificationService {
    private $sepayService;
    private $telegramService;
    private $lastTransactionId;
    private $isRunning;
    private $checkInterval;
    
    public function __construct() {
        $this->sepayService = new SepayService();
        $this->telegramService = new TelegramService();
        $this->lastTransactionId = null;
        $this->isRunning = false;
        $this->checkInterval = 30; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    public function getNewTransactions() {
        try {
            $transactions = $this->sepayService->getTransactions();
            
            if (empty($transactions)) {
                return [];
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if ($this->lastTransactionId === null) {
                $this->lastTransactionId = $transactions[0]['id'];
                error_log("SepayNotificationService: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω ID: " . $this->lastTransactionId);
                return [];
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏)
            $newTransactions = [];
            foreach ($transactions as $transaction) {
                if ($transaction['id'] === $this->lastTransactionId) {
                    break; // –î–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂
                if (floatval($transaction['amount_in']) > 0) {
                    $newTransactions[] = $transaction;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if (!empty($transactions)) {
                $this->lastTransactionId = $transactions[0]['id'];
            }
            
            return $newTransactions;
            
        } catch (Exception $e) {
            error_log("SepayNotificationService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: " . $e->getMessage());
            return [];
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
     */
    public function sendTransactionNotifications() {
        try {
            $newTransactions = $this->getNewTransactions();
            
            if (empty($newTransactions)) {
                return ['count' => 0, 'sent' => 0];
            }
            
            error_log("SepayNotificationService: –ù–∞–π–¥–µ–Ω–æ " . count($newTransactions) . " –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
            
            $sentCount = 0;
            foreach ($newTransactions as $transaction) {
                $result = $this->telegramService->sendSepayTransactionNotification($transaction);
                
                if ($result) {
                    $sentCount++;
                    error_log("SepayNotificationService: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ " . $transaction['id']);
                } else {
                    error_log("SepayNotificationService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ " . $transaction['id']);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                sleep(1);
            }
            
            return ['count' => count($newTransactions), 'sent' => $sentCount];
            
        } catch (Exception $e) {
            error_log("SepayNotificationService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " . $e->getMessage());
            return ['count' => 0, 'sent' => 0, 'error' => $e->getMessage()];
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è cron –∏–ª–∏ –¥–µ–º–æ–Ω–∞)
     */
    public function startMonitoring() {
        if ($this->isRunning) {
            error_log("SepayNotificationService: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
            return false;
        }
        
        $this->isRunning = true;
        error_log("SepayNotificationService: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Sepay");
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        $this->sendTransactionNotifications();
        
        return true;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public function stopMonitoring() {
        if (!$this->isRunning) {
            error_log("SepayNotificationService: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω");
            return false;
        }
        
        $this->isRunning = false;
        error_log("SepayNotificationService: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Sepay");
        
        return true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public function getStatus() {
        return [
            'isRunning' => $this->isRunning,
            'lastTransactionId' => $this->lastTransactionId,
            'checkInterval' => $this->checkInterval,
            'chatIds' => $this->telegramService->getChatIds()
        ];
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepay API
     */
    public function testSepayConnection() {
        try {
            $transactions = $this->sepayService->getTransactions();
            return [
                'success' => true,
                'count' => count($transactions),
                'message' => '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepay API —É—Å–ø–µ—à–Ω–æ'
            ];
        } catch (Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage(),
                'message' => '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepay API'
            ];
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
     */
    public function testTelegramConnection() {
        try {
            $testMessage = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SepayNotificationService\n\n–í—Ä–µ–º—è: " . date('d.m.Y H:i:s');
            $result = $this->telegramService->sendToAllChats($testMessage);
            
            $successCount = 0;
            foreach ($result as $chatId => $success) {
                if ($success) $successCount++;
            }
            
            return [
                'success' => $successCount > 0,
                'sentTo' => $successCount,
                'totalChats' => count($this->telegramService->getChatIds()),
                'message' => "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {$successCount} –∏–∑ " . count($this->telegramService->getChatIds()) . " —á–∞—Ç–æ–≤"
            ];
        } catch (Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage(),
                'message' => '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram'
            ];
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    public function setCheckInterval($seconds) {
        if ($seconds < 10) {
            throw new Exception('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 10 —Å–µ–∫—É–Ω–¥');
        }
        
        $this->checkInterval = $seconds;
        error_log("SepayNotificationService: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {$seconds} —Å–µ–∫—É–Ω–¥");
        
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    public function getCheckInterval() {
        return $this->checkInterval;
    }
}
