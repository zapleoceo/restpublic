<?php
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ 1 –Ω–∞ —Å–∫–ª–∞–¥ 3
 * –° –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php safe_move_storage.php [--dry-run] [--force]
 * 
 * –û–ø—Ü–∏–∏:
 * --dry-run  - —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å
 * --force    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require_once 'vendor/autoload.php';
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
$api_token = $_ENV['POSTER_API_TOKEN'] ?? '922371:489411264005b482039f38b8ee21f6fb';
$api_base = 'https://joinposter.com/api';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤
$from_storage_id = 1; // –°–∫–ª–∞–¥ –∏—Å—Ç–æ—á–Ω–∏–∫
$to_storage_id = 3;   // –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$options = getopt('', ['dry-run', 'force']);
$is_dry_run = isset($options['dry-run']);
$is_force = isset($options['force']);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage($message, $level = 'INFO') {
    $timestamp = date('Y-m-d H:i:s');
    echo "[$timestamp] [$level] $message\n";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeApiRequest($url, $method = 'GET', $data = null) {
    $ch = curl_init();
    
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    
    if ($method === 'POST' && $data) {
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/x-www-form-urlencoded'
        ]);
    }
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curl_error = curl_error($ch);
    curl_close($ch);
    
    if ($curl_error) {
        throw new Exception("CURL Error: " . $curl_error);
    }
    
    if ($http_code !== 200) {
        throw new Exception("HTTP Error: " . $http_code . " Response: " . $response);
    }
    
    return json_decode($response, true);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function askConfirmation($message) {
    echo "\n$message (y/N): ";
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);
    fclose($handle);
    return trim(strtolower($line)) === 'y';
}

try {
    if ($is_dry_run) {
        logMessage("üîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê (dry-run)");
    } else {
        logMessage("üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ $from_storage_id –Ω–∞ —Å–∫–ª–∞–¥ $to_storage_id");
    }
    
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    logMessage("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...");
    $storages_url = $api_base . '/storage.getStorages?token=' . $api_token;
    $storages_data = makeApiRequest($storages_url);
    
    if (!isset($storages_data['response'])) {
        throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤");
    }
    
    $storages = $storages_data['response'];
    $from_storage = null;
    $to_storage = null;
    
    foreach ($storages as $storage) {
        if ($storage['storage_id'] == $from_storage_id) {
            $from_storage = $storage;
        }
        if ($storage['storage_id'] == $to_storage_id) {
            $to_storage = $storage;
        }
    }
    
    if (!$from_storage) {
        throw new Exception("–°–∫–ª–∞–¥ $from_storage_id –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    if (!$to_storage) {
        throw new Exception("–°–∫–ª–∞–¥ $to_storage_id –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    logMessage("‚úÖ –°–∫–ª–∞–¥ –∏—Å—Ç–æ—á–Ω–∏–∫: " . $from_storage['storage_name'] . " (ID: $from_storage_id)");
    logMessage("‚úÖ –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: " . $to_storage['storage_name'] . " (ID: $to_storage_id)");
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    logMessage("üì¶ –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ $from_storage_id...");
    $leftovers_url = $api_base . '/storage.getStorageLeftovers?token=' . $api_token . '&storage_id=' . $from_storage_id;
    $leftovers_data = makeApiRequest($leftovers_url);
    
    if (!isset($leftovers_data['response'])) {
        throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ");
    }
    
    $leftovers = $leftovers_data['response'];
    logMessage("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ: " . count($leftovers));
    
    // –®–∞–≥ 3: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    $positive_leftovers = [];
    $total_quantity = 0;
    $total_value = 0;
    
    foreach ($leftovers as $item) {
        if (isset($item['storage_ingredient_left']) && $item['storage_ingredient_left'] > 0) {
            $quantity = $item['storage_ingredient_left'];
            $prime_cost = $item['prime_cost'] ?? 0;
            $value = $quantity * $prime_cost;
            
            $positive_leftovers[] = [
                'ingredient_id' => $item['ingredient_id'],
                'ingredient_name' => $item['ingredient_name'],
                'quantity' => $quantity,
                'unit' => $item['ingredient_unit'],
                'type' => $item['ingredients_type'] ?? 4,
                'prime_cost' => $prime_cost,
                'value' => $value
            ];
            
            $total_quantity += $quantity;
            $total_value += $value;
        }
    }
    
    logMessage("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: " . count($positive_leftovers));
    
    if (empty($positive_leftovers)) {
        logMessage("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è");
        exit(0);
    }
    
    // –®–∞–≥ 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logMessage("\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ò:");
    logMessage("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    $by_type = [];
    foreach ($positive_leftovers as $item) {
        $type = $item['type'];
        if (!isset($by_type[$type])) {
            $by_type[$type] = ['items' => [], 'count' => 0, 'quantity' => 0, 'value' => 0];
        }
        
        $by_type[$type]['items'][] = $item;
        $by_type[$type]['count']++;
        $by_type[$type]['quantity'] += $item['quantity'];
        $by_type[$type]['value'] += $item['value'];
    }
    
    foreach ($by_type as $type => $data) {
        $type_name = match($type) {
            1 => '–¢–æ–≤–∞—Ä—ã',
            4 => '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', 
            5 => '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã',
            default => "–¢–∏–ø $type"
        };
        
        logMessage("\nüìÅ $type_name ({$data['count']} –ø–æ–∑–∏—Ü–∏–π):");
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        usort($data['items'], function($a, $b) {
            return $b['quantity'] <=> $a['quantity'];
        });
        
        foreach ($data['items'] as $item) {
            $value_str = $item['value'] > 0 ? " (—Å—Ç–æ–∏–º–æ—Å—Ç—å: " . number_format($item['value'], 0, ',', ' ') . " VND)" : "";
            logMessage("  ‚Ä¢ {$item['ingredient_name']}: {$item['quantity']} {$item['unit']}$value_str");
        }
        
        logMessage("  üìä –ò—Ç–æ–≥–æ –ø–æ —Ç–∏–ø—É: {$data['quantity']} –µ–¥–∏–Ω–∏—Ü, —Å—Ç–æ–∏–º–æ—Å—Ç—å: " . number_format($data['value'], 0, ',', ' ') . " VND");
    }
    
    logMessage("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    logMessage("  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: " . count($positive_leftovers));
    logMessage("  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: $total_quantity –µ–¥–∏–Ω–∏—Ü");
    logMessage("  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: " . number_format($total_value, 0, ',', ' ') . " VND");
    logMessage("  ‚Ä¢ –°–∫–ª–∞–¥ –∏—Å—Ç–æ—á–Ω–∏–∫: {$from_storage['storage_name']}");
    logMessage("  ‚Ä¢ –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {$to_storage['storage_name']}");
    
    // –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ dry-run –∏ –Ω–µ force)
    if (!$is_dry_run && !$is_force) {
        logMessage("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç –í–°–ï –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏!");
        logMessage("   –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ $from_storage_id –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã.");
        
        if (!askConfirmation("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ?")) {
            logMessage("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            exit(0);
        }
    }
    
    if ($is_dry_run) {
        logMessage("\nüîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –ó–ê–í–ï–†–®–ï–ù");
        logMessage("   –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ --dry-run");
        exit(0);
    }
    
    // –®–∞–≥ 6: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    logMessage("\nüîÑ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ...");
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Poster API
    $moving_data = [
        'date' => date('Y-m-d H:i:s'),
        'from_storage' => $from_storage_id,
        'to_storage' => $to_storage_id
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Poster API
    foreach ($positive_leftovers as $index => $item) {
        $moving_data["ingredients[{$index}][ingredient_id]"] = $item['ingredient_id'];
        $moving_data["ingredients[{$index}][amount]"] = $item['quantity'];
        $moving_data["ingredients[{$index}][type]"] = $item['type'];
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    $create_moving_url = $api_base . '/storage.createMoving?token=' . $api_token;
    $moving_result = makeApiRequest($create_moving_url, 'POST', $moving_data);
    
    if (isset($moving_result['success']) && $moving_result['success'] == 1) {
        $moving_id = $moving_result['response'];
        logMessage("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ID: $moving_id");
        
        logMessage("\nüéâ –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!");
        logMessage("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        logMessage("üìã ID –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: $moving_id");
        logMessage("üìÖ –î–∞—Ç–∞: " . date('Y-m-d H:i:s'));
        logMessage("üì¶ –ü–æ–∑–∏—Ü–∏–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: " . count($positive_leftovers));
        logMessage("üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: " . number_format($total_value, 0, ',', ' ') . " VND");
        logMessage("üè™ –°–∫–ª–∞–¥ –∏—Å—Ç–æ—á–Ω–∏–∫: {$from_storage['storage_name']} (ID: $from_storage_id)");
        logMessage("üè™ –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {$to_storage['storage_name']} (ID: $to_storage_id)");
        
    } else {
        throw new Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: " . json_encode($moving_result));
    }
    
} catch (Exception $e) {
    logMessage("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage(), 'ERROR');
    exit(1);
}
?>
