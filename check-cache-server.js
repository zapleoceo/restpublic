const { MongoClient } = require('mongodb');

async function checkCache() {
  const client = new MongoClient('mongodb://localhost:27017');
  try {
    await client.connect();
    const db = client.db('northrepublic');
    const menuCollection = db.collection('menu');
    const settingsCollection = db.collection('settings');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–µ—à –º–µ–Ω—é...');
    const menuCache = await menuCollection.findOne({_id: 'current_menu'});
    
    if (menuCache) {
      console.log('üìÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:', menuCache.updated_at);
      console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∫–µ—à–µ:', menuCache.categories ? menuCache.categories.length : 0);
      
      if (menuCache.categories && menuCache.categories.length > 0) {
        console.log('\nüìù –¢–µ–∫—É—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
        menuCache.categories.forEach((cat, index) => {
          console.log(`  ${index + 1}. ID: ${cat.category_id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${cat.category_name || cat.name}`);
        });
      }
    } else {
      console.log('‚ùå –ö–µ—à –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('\n‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    const lastUpdate = await settingsCollection.findOne({key: 'menu_last_update_time'});
    const lastCheck = await settingsCollection.findOne({key: 'menu_last_check_time'});
    
    if (lastUpdate) {
      const updateTime = new Date(lastUpdate.value * 1000);
      console.log('üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:', updateTime.toLocaleString('ru-RU', {timeZone: 'Asia/Ho_Chi_Minh'}));
    }
    
    if (lastCheck) {
      const checkTime = new Date(lastCheck.value * 1000);
      console.log('üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', checkTime.toLocaleString('ru-RU', {timeZone: 'Asia/Ho_Chi_Minh'}));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.close();
  }
}

checkCache();