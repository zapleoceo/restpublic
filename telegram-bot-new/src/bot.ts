import { Telegraf, Markup, session, Context } from 'telegraf';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '../.env' });

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  sessionToken?: string;
  authMode?: boolean;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Å—Å–∏–π
interface MyContext extends Context {
  session?: SessionData;
}

const bot = new Telegraf<MyContext>(process.env.TELEGRAM_BOT_TOKEN!);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());

// –£–±–∏—Ä–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.telegram.deleteMyCommands();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authKeyboard = Markup.keyboard([
  [Markup.button.contactRequest('üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')]
]).resize();

// –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const mainKeyboard = Markup.keyboard([
  ['üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è']
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const startPayload = ctx.message.text.split(' ')[1];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
  if (ctx.chat?.type === 'private') {
    if (startPayload && startPayload.startsWith('auth_')) {
      // –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å sessionToken
      const sessionToken = startPayload.replace('auth_', '');
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —Å —Ç–æ–∫–µ–Ω–æ–º: ${sessionToken}`);

      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
        authKeyboard
      );

      ctx.session = { authMode: true, sessionToken: sessionToken };
    } else if (startPayload === 'auth') {
      // –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram`);

      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
        authKeyboard
      );

      ctx.session = { authMode: true, sessionToken: 'auth' };
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
      await ctx.reply(
        'üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        mainKeyboard
      );

      ctx.session = { authMode: false, sessionToken: 'start' };
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
bot.hears('üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', async (ctx) => {
  if (ctx.chat?.type === 'private') {
    console.log(`üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);

    await ctx.reply(
      'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
      authKeyboard
    );

    ctx.session = { ...ctx.session, authMode: true, sessionToken: 'button_auth' };
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
bot.on('contact', async (ctx) => {
  if (ctx.chat?.type !== 'private') {
    return;
  }

  const contact = ctx.message.contact;
  const session = ctx.session;

  console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.phone_number}, ${contact.first_name} ${contact.last_name || ''}`);
  console.log(`üîê –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:`, session);

  if (session && session.sessionToken) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sessionToken –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let sessionToken = session.sessionToken;
      if (sessionToken === 'auth' || sessionToken === 'start' || sessionToken === 'button_auth') {
        sessionToken = Date.now().toString(36) + Math.random().toString(36).substr(2);
      }
      
      const requestData = {
        phone: contact.phone_number,
        name: contact.first_name,
        lastName: contact.last_name || '',
        birthday: '',
        sessionToken: sessionToken
      };
      
      console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend:`, {
        url: `https://veranda.my/auth_telegram_callback.php`,
        data: requestData
      });
      
      const response = await fetch(`https://veranda.my/auth_telegram_callback.php`, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      console.log(`üì° Response status: ${response.status}`);
      
      const responseText = await response.text();
      console.log(`üì° Response body:`, responseText);
      
      let result;
      try {
        result = JSON.parse(responseText);
      } catch (parseError) {
        console.error(`‚ùå JSON parse error:`, parseError);
        console.error(`‚ùå Response text:`, responseText);
        throw new Error(`Invalid JSON response: ${responseText.substring(0, 100)}...`);
      }
      
      console.log(`üì• –û—Ç–≤–µ—Ç –æ—Ç backend:`, {
        status: response.status,
        success: result.success,
        data: result
      });

      if (result.success) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const returnUrl = result.redirectUrl || `https://veranda.my/menu2.php?auth=success&session=${sessionToken}`;
        const returnKeyboard = Markup.inlineKeyboard([
          [Markup.button.url('üîó –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', returnUrl)]
        ]);

        await ctx.reply(
          '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
          returnKeyboard
        );

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        ctx.session = { ...ctx.session, authMode: false, sessionToken: undefined };
      } else {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          mainKeyboard
        );
      }
    } catch (error) {
      console.error('Error in telegram auth callback:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        mainKeyboard
      );
    }
  } else {
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  if (ctx.chat?.type === 'private') {
    if (ctx.session?.authMode) {
      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –≤—ã—à–µ.',
        authKeyboard
      );
    } else {
      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è".',
        mainKeyboard
      );
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  
  if (ctx.chat?.type === 'private') {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞...');
    await bot.launch();
    console.log('‚úÖ –ù–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startBot();
