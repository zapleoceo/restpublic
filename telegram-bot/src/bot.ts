import { Telegraf, Markup, session, Context } from 'telegraf';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –æ–±—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
dotenv.config({ path: '../../.cursor/env.txt' });

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  returnUrl?: string;
  authMode?: boolean;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Å—Å–∏–π
interface MyContext extends Context {
  session?: SessionData;
}

const bot = new Telegraf<MyContext>(process.env.TELEGRAM_BOT_TOKEN!);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());

// –£–±–∏—Ä–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.telegram.deleteMyCommands();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authKeyboard = Markup.keyboard([
  [Markup.button.contactRequest('üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')]
]).resize();

// –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const mainKeyboard = Markup.keyboard([
  ['üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è']
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const startPayload = ctx.message.text.split(' ')[1];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
  if (ctx.chat?.type === 'private') {
    if (startPayload && startPayload.startsWith('auth_')) {
      // –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const returnUrl = startPayload.replace('auth_', '');
      console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram. Return URL: ${returnUrl}`);      

      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
        authKeyboard
      );

      ctx.session = { ...ctx.session, returnUrl, authMode: true };
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
      await ctx.reply(
        'üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        mainKeyboard
      );
    }
  } else {
    // –í –≥—Ä—É–ø–ø–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
    await ctx.reply(
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç North Republic. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç: @RestPublic_bot'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
bot.hears('üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
  if (ctx.chat?.type === 'private') {
    // –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
    await ctx.reply(
      'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',  
      authKeyboard
    );
    ctx.session = { ...ctx.session, authMode: true };
  } else {
    // –í –≥—Ä—É–ø–ø–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await ctx.reply(
      'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º: @RestPublic_bot'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
bot.on('contact', async (ctx) => {
  const contact = ctx.message.contact;
  const session = ctx.session;

  console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.phone_number}, ${contact.first_name} ${contact.last_name || ''}`);                                                   

  if (session?.authMode) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend
      const backendUrl = process.env.BACKEND_URL || 'https://northrepublic.me';  
      const response = await fetch(`${backendUrl}/api/auth/telegram-callback`, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: contact.phone_number,
          name: contact.first_name,
          lastName: contact.last_name || '',
          birthday: '',
          sessionToken: session.returnUrl || ''
        })
      });

      const result = await response.json() as any;

      if (result.success) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const returnKeyboard = Markup.inlineKeyboard([
          [Markup.button.url('üîó –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', result.redirectUrl || 'https://northrepublic.me')]                                                      
        ]);

        await ctx.reply(
          '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',                                                                           
          returnKeyboard
        );

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        ctx.session = { ...ctx.session, authMode: false, returnUrl: undefined }; 
      } else {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          mainKeyboard
        );
      }
    } catch (error) {
      console.error('Error in telegram auth callback:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        mainKeyboard
      );
    }
  } else {
    await ctx.reply(
      'üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è".',     
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
  if (ctx.chat?.type === 'private') {
    if (ctx.session?.authMode) {
      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –≤—ã—à–µ.',
        authKeyboard
      );
    } else {
      await ctx.reply(
        'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è".',
        mainKeyboard
      );
    }
  } else {
    // –í –≥—Ä—É–ø–ø–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    await ctx.reply(
      'üëã –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç: @RestPublic_bot'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –Ω–∞ NR —Å–µ—Ä–≤–µ—Ä–µ...');
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ NR —Å–µ—Ä–≤–µ—Ä–µ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startBot();
