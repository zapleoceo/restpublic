#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const mongoService = require('../services/mongoService');

async function migrateTranslations() {
  console.log('üìÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
  
  const langDir = path.join(__dirname, '../../frontend/public/lang');
  const languages = ['ru', 'en', 'vi'];
  
  for (const lang of languages) {
    const filePath = path.join(langDir, `${lang}.json`);
    
    if (fs.existsSync(filePath)) {
      try {
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        await mongoService.setTranslations(lang, data);
        console.log(`‚úÖ ${lang}.json ‚Üí MongoDB`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${lang}.json:`, error.message);
      }
    } else {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª ${lang}.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
}

async function migrateSiteConfig() {
  console.log('‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞
    const siteConfigPath = path.join(__dirname, '../../frontend/src/constants/siteConfig.js');
    
    if (fs.existsSync(siteConfigPath)) {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä—Å–∏–º —ç–∫—Å–ø–æ—Ä—Ç—ã
      const configContent = fs.readFileSync(siteConfigPath, 'utf8');
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const siteNameMatch = configContent.match(/export const SITE_NAME = ({[\s\S]*?});/);
      const siteDescMatch = configContent.match(/export const SITE_DESCRIPTION = ({[\s\S]*?});/);
      
      let siteConfig = {};
      
      if (siteNameMatch) {
        siteConfig.SITE_NAME = eval(`(${siteNameMatch[1]})`);
      }
      
      if (siteDescMatch) {
        siteConfig.SITE_DESCRIPTION = eval(`(${siteDescMatch[1]})`);
      }
      
      await mongoService.setConfig('site_config', siteConfig);
      console.log('‚úÖ siteConfig.js ‚Üí MongoDB');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞:', error.message);
  }
}

async function migrateSectionsConfig() {
  console.log('üèóÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π...');
  
  try {
    // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π (–∏–∑ HomePage.jsx)
    const sectionsConfig = {
      menu: {
        id: 'menu',
        icon: '/img/menu/icon.png',
        logo: '/img/menu/big.jpg',
        link: '/menu',
        enabled: true
      },
      lasertag: {
        id: 'lasertag',
        icon: '/img/lazertag/icon.png',
        logo: '/img/lazertag/logo.png',
        link: '/lasertag',
        enabled: true
      },
      bow: {
        id: 'bow',
        icon: '/img/archery/icon.png',
        logo: '/img/archery/logo.png',
        link: '/archerytag',
        enabled: true
      },
      cinema: {
        id: 'cinema',
        icon: '/img/cinema/icon.png',
        logo: '/img/cinema/big.jpg',
        link: '/cinema',
        enabled: true
      },
      rent: {
        id: 'rent',
        icon: '/img/bbq/icon.png',
        logo: '/img/bbq/buttton.png',
        link: '/bbq_zone',
        enabled: true
      },
      quests: {
        id: 'quests',
        icon: '/img/quests/icon.png',
        logo: '/img/quests/big.jpg',
        link: '/quests',
        enabled: true
      },
      guitar: {
        id: 'guitar',
        icon: '/img/guitar/icon.png',
        logo: '/img/guitar/button.jpg',
        link: '/guitar',
        enabled: true
      },
      boardgames: {
        id: 'boardgames',
        icon: '/img/boardgames/icon.png',
        logo: '/img/boardgames/button.jpg',
        link: '/boardgames',
        enabled: true
      },
      yoga: {
        id: 'yoga',
        icon: '/img/yoga/icon.png',
        logo: '/img/yoga/button.jpg?v=1',
        link: '/yoga',
        enabled: true
      }
    };
    
    await mongoService.setConfig('sections', sectionsConfig);
    console.log('‚úÖ sectionsConfig ‚Üí MongoDB');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π:', error.message);
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ MongoDB...\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoService.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await migrateTranslations();
    console.log('');
    
    await migrateSiteConfig();
    console.log('');
    
    await migrateSectionsConfig();
    console.log('');
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const translations = await mongoService.getAllTranslations();
    const configs = await mongoService.getAllConfigs();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log('- –ü–µ—Ä–µ–≤–æ–¥—ã:', Object.keys(translations).join(', '));
    console.log('- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', Object.keys(configs).join(', '));
    
    // –Ø–í–ù–û –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...');
    process.exit(0);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  main();
}

module.exports = { main };
