const express = require('express');
const router = express.Router();
const axios = require('axios');
const { MongoClient } = require('mongodb');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const mongoUrl = 'mongodb://localhost:27017';
const dbName = 'northrepublic';
const collectionName = 'menu';

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –º–µ–Ω—é
router.post('/update-menu', async (req, res) => {
    let client;
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –º–µ–Ω—é...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–∞—à–µ–≥–æ API (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        const apiResponse = await axios.get('http://127.0.0.1:3002/api/menu', {
            timeout: 30000
        });
        
        if (apiResponse.status !== 200) {
            throw new Error(`API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: ${apiResponse.status}`);
        }
        
        const menuData = apiResponse.data;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        client = new MongoClient(mongoUrl);
        await client.connect();
        const db = client.db(dbName);
        const collection = db.collection(collectionName);
        
        const result = await collection.replaceOne(
            { _id: 'current_menu' },
            {
                _id: 'current_menu',
                data: menuData,
                updated_at: new Date(),
                categories: menuData.categories || [],
                products: menuData.products || []
            },
            { upsert: true }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const settingsCollection = db.collection('settings');
        await settingsCollection.replaceOne(
            { key: 'menu_last_update_time' },
            {
                key: 'menu_last_update_time',
                value: Math.floor(Date.now() / 1000), // Unix timestamp
                updated_at: new Date()
            },
            { upsert: true }
        );
        
        console.log(`‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.modifiedCount}`);
        
        res.json({
            success: true,
            message: '–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            modifiedCount: result.modifiedCount,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error.message);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞',
            error: error.message
        });
    } finally {
        if (client) {
            await client.close();
        }
    }
});

module.exports = router;
