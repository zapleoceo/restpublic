const express = require('express');
const router = express.Router();
const axios = require('axios');
const { MongoClient } = require('mongodb');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const mongoUrl = process.env.MONGODB_URL || 'mongodb://localhost:27017';
const dbName = process.env.MONGODB_DB_NAME || 'veranda';
const collectionName = 'menu';
const API_PORT = process.env.PORT || 3002;

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –º–µ–Ω—é
router.post('/update-menu', async (req, res) => {
    let client;
    let tablesData = null;
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –º–µ–Ω—é...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–∞—à–µ–≥–æ API (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        const authToken = process.env.API_AUTH_TOKEN;
        const apiResponse = await axios.get(`http://127.0.0.1:${API_PORT}/api/menu`, {
            timeout: 30000,
            headers: {
                'X-API-Token': authToken
            }
        });
        
        if (apiResponse.status !== 200) {
            throw new Error(`API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: ${apiResponse.status}`);
        }
        
        const menuData = apiResponse.data;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        client = new MongoClient(mongoUrl);
        await client.connect();
        const db = client.db(dbName);
        const collection = db.collection(collectionName);
        
        const result = await collection.replaceOne(
            { _id: 'current_menu' },
            {
                _id: 'current_menu',
                data: menuData,
                updated_at: new Date(),
                categories: menuData.categories || [],
                products: menuData.products || []
            },
            { upsert: true }
        );
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–æ–≤...');
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª—ã —á–µ—Ä–µ–∑ –Ω–∞—à API
            const tablesResponse = await axios.get(`http://127.0.0.1:${API_PORT}/api/menu/tables`, {
                timeout: 15000,
                headers: {
                    'X-API-Token': authToken
                }
            });
            
            if (tablesResponse.status === 200) {
                tablesData = tablesResponse.data;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–ª—ã –∏ –∑–∞–ª—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                console.log('üîç Before save - –ó–∞–ª—ã:', JSON.stringify(tablesData.halls, null, 2));
                
                const docToSave = {
                    _id: 'current_tables',
                    tables: tablesData.tables || [],
                    halls: tablesData.halls || [], // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ª—ã
                    updated_at: new Date(),
                    count: tablesData.count || 0
                };
                
                const tablesResult = await collection.replaceOne(
                    { _id: 'current_tables' },
                    docToSave,
                    { upsert: true }
                );
                
                console.log(`‚úÖ –°—Ç–æ–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tablesData.count || 0}`);
                console.log(`‚úÖ –ó–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tablesData.halls ? tablesData.halls.length : 0}`);
                console.log('üîç After save - –ó–∞–ª—ã:', JSON.stringify(tablesData.halls, null, 2));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                const saved = await collection.findOne({ _id: 'current_tables' });
                console.log('üîç Verified in DB - –ó–∞–ª—ã:', JSON.stringify(saved.halls, null, 2));
            } else {
                throw new Error(`Tables API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: ${tablesResponse.status}`);
            }
        } catch (tablesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤:', tablesError.message);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ª–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const settingsCollection = db.collection('settings');
        await settingsCollection.replaceOne(
            { key: 'menu_last_update_time' },
            {
                key: 'menu_last_update_time',
                value: Math.floor(Date.now() / 1000), // Unix timestamp
                updated_at: new Date()
            },
            { upsert: true }
        );
        
        // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        const cacheLogsCollection = db.collection('cache_update_logs');
        const deletedLogs = await cacheLogsCollection.deleteMany({
            timestamp: { $lt: thirtyDaysAgo }
        });
        
        if (deletedLogs.deletedCount > 0) {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedLogs.deletedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞`);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await cacheLogsCollection.insertOne({
            timestamp: new Date(),
            status: 'success',
            message: 'Cache updated successfully',
            categoriesCount: menuData.categories?.length || 0,
            productsCount: menuData.products?.length || 0,
            tablesCount: (tablesData && tablesData.count) || 0,
            hallsCount: (tablesData && tablesData.halls) ? tablesData.halls.length : 0
        });
        
        console.log(`‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.modifiedCount}`);
        
        res.json({
            success: true,
            message: '–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            modifiedCount: result.modifiedCount,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error.message);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ MongoDB
        try {
            if (client) {
                const db = client.db(dbName);
                const cacheLogsCollection = db.collection('cache_update_logs');
                await cacheLogsCollection.insertOne({
                    timestamp: new Date(),
                    status: 'error',
                    message: 'Cache update failed',
                    error: error.message,
                    stack: error.stack
                });
            }
        } catch (logError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–æ–≥:', logError.message);
        }
        
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞',
            error: error.message
        });
    } finally {
        if (client) {
            await client.close();
        }
    }
});

module.exports = router;
