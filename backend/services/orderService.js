const axios = require('axios');

class OrderService {
  constructor() {
    this.baseUrl = 'https://joinposter.com/api';
  }

  getToken() {
    const token = process.env.POSTER_API_TOKEN;
    if (!token) {
      throw new Error('POSTER_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    return token;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async checkExistingClient(phone) {
    try {
      console.log('Checking existing client with phone:', phone);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      let formattedPhone = phone;
      if (formattedPhone.startsWith('+')) {
        formattedPhone = formattedPhone.substring(1);
      }
      formattedPhone = formattedPhone.replace(/\D/g, '');
      
      console.log('Searching for formatted phone:', formattedPhone);
      
      const response = await axios.get(`${this.baseUrl}/clients.getClients?token=${this.getToken()}`);

      console.log('Client check response:', response.data);
      
      if (response.data && response.data.response) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const client = response.data.response.find(c => {
          const clientPhone = c.phone || c.phone_number || '';
          const cleanClientPhone = clientPhone.replace(/\D/g, '');
          return cleanClientPhone === formattedPhone;
        });
        
        if (client) {
          return {
            exists: true,
            client: client
          };
        }
      }

      return { exists: false, client: null };
    } catch (error) {
      console.error('Error checking existing client:', error.response?.data || error.message);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  async findClientByPhone(phone) {
    try {
      console.log('Finding client with phone:', phone);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      let formattedPhone = phone;
      if (formattedPhone.startsWith('+')) {
        formattedPhone = formattedPhone.substring(1);
      }
      formattedPhone = formattedPhone.replace(/\D/g, '');
      
      console.log('Searching for formatted phone:', formattedPhone);
      
      const response = await axios.get(`${this.baseUrl}/clients.getClients?token=${this.getToken()}`);

      console.log('Client search response:', response.data);
      
      if (response.data && response.data.response) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const client = response.data.response.find(c => {
          const clientPhone = c.phone || c.phone_number || '';
          const cleanClientPhone = clientPhone.replace(/\D/g, '');
          return cleanClientPhone === formattedPhone;
        });
        
        if (client) {
          return {
            client: client
          };
        }
      }

      return null;
    } catch (error) {
      console.error('Error finding client by phone:', error.response?.data || error.message);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async createClient(clientData) {
    try {
      console.log('Creating client with data:', clientData);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Poster API
      let phone = clientData.phone;
      if (phone.startsWith('+')) {
        phone = phone.substring(1); // –£–±–∏—Ä–∞–µ–º +
      }
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
      phone = phone.replace(/\D/g, '');
      
      console.log('Formatted phone:', phone);
      
      // –°–æ–∑–¥–∞–µ–º URLSearchParams –¥–ª—è form data
      const formData = new URLSearchParams();
      formData.append('client_name', clientData.name);
      formData.append('client_lastname', clientData.lastName || '');
      formData.append('client_phone', phone);
      formData.append('client_birthday', clientData.birthday || '');
      formData.append('client_sex', clientData.gender === 'male' ? 1 : (clientData.gender === 'female' ? 2 : 0));
      formData.append('client_groups_id_client', 1); // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ - –≥—Ä—É–ø–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (New customers)
      
      const response = await axios.post(`${this.baseUrl}/clients.createClient?token=${this.getToken()}`, formData, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      });

      console.log('Client creation response:', response.data);

      if (response.data && response.data.response) {
        // Poster API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ ID –∫–ª–∏–µ–Ω—Ç–∞
        return response.data.response;
      }

      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
    } catch (error) {
      console.error('Error creating client:', error.response?.data || error.message);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–≤—ã–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  async checkFirstOrder(clientId) {
    try {
      console.log('Checking first order for client:', clientId);
      const dateFrom = '2020-01-01';
      const dateTo = new Date().toISOString().split('T')[0];
      
      const response = await axios.get(
        `${this.baseUrl}/dash.getTransactions?token=${this.getToken()}&dateFrom=${dateFrom}&dateTo=${dateTo}`
      );

      console.log('First order check response:', response.data);

             // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ client_id
       if (response.data && response.data.response) {
         const clientTransactions = response.data.response.filter(t => 
           t.client_id.toString() === clientId.toString()
         );
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ - —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
        return clientTransactions.length === 0;
      }
      
      return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    } catch (error) {
      console.error('Error checking first order:', error.response?.data || error.message);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async createOrder(orderData) {
    try {
      const { items, total, tableId, comment, clientId, customerData, withRegistration } = orderData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
      const activeOrder = await this.findActiveOrder(clientId);
      
      if (activeOrder) {
        console.log(`üîÑ Found active order ${activeOrder.transaction_id}, adding items to it`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
        const updatedOrder = await this.addToExistingOrder(activeOrder.transaction_id, items);
        
        return {
          order: updatedOrder,
          isExistingOrder: true,
          existingOrderId: activeOrder.transaction_id
        };
      }

      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      console.log(`üÜï No active order found, creating new order`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
      const products = items.map(item => {
        // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —Ü–µ–Ω—É
        let price = item.price;
        if (typeof price === 'object' && price !== null) {
          // –ï—Å–ª–∏ —Ü–µ–Ω–∞ - –æ–±—ä–µ–∫—Ç, –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É
          price = price['1'] || Object.values(price)[0] || 0;
        }
        price = parseFloat(price) || 0;

        return {
          product_id: item.product_id,
          count: item.quantity,
          price: Math.round(price * 100) // Poster API –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        };
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ–ª–∞, –∏–º–µ–Ω–µ–º –≥–æ—Å—Ç—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
      let orderComment = '';
      if (tableId) {
        orderComment += `–°—Ç–æ–ª: ${tableId}`;
      }
      if (orderData.customerData && orderData.customerData.name) {
        orderComment += orderComment ? ' | ' : '';
        orderComment += `–ì–æ—Å—Ç—å: ${orderData.customerData.name}`;
      }
      if (comment) {
        orderComment += orderComment ? ' | ' : '';
        orderComment += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const orderPayload = {
        spot_id: tableId || 1, // ID —Å—Ç–æ–ª–∞/–º–µ—Å—Ç–∞
        products: products,
        comment: orderComment || ''
      };

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ client_id
      if (clientId) {
        orderPayload.client_id = clientId;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É 20% –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      if (withRegistration) {
        orderPayload.discounts = [
          { "type": "percent", "value": 20 }
        ];
      }

      console.log('Creating order with payload:', JSON.stringify(orderPayload, null, 2));
      
      const response = await axios.post(
        `${this.baseUrl}/incomingOrders.createIncomingOrder?token=${this.getToken()}`,
        orderPayload,
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log('Order creation response:', response.data);

      if (response.data && response.data.response) {
        return {
          order: response.data.response,
          isExistingOrder: false
        };
      }

      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    } catch (error) {
      console.error('Error creating order:', error);
      console.error('Order data:', orderData);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + (error.response?.data?.error || error.message));
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –≥–æ—Å—Ç—è (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞)
   */
  async createGuestOrder(orderData) {
    try {
      const { items, total, tableId, comment, customerData } = orderData;

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      const clientData = {
        name: customerData.name || '–ì–æ—Å—Ç—å',
        phone: customerData.phone
      };

      const clientId = await this.createClient(clientData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
      const activeOrder = await this.findActiveOrder(clientId);
      
      if (activeOrder) {
        console.log(`üîÑ Found active order ${activeOrder.transaction_id}, adding items to it`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
        const updatedOrder = await this.addToExistingOrder(activeOrder.transaction_id, items);
        
        return {
          order: updatedOrder,
          client: { client_id: clientId },
          isExistingOrder: true,
          existingOrderId: activeOrder.transaction_id
        };
      } else {
        console.log(`üÜï No active order found, creating new order`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        const order = await this.createOrder({
          items,
          total,
          tableId,
          comment,
          clientId,
          customerData: clientData,
          withRegistration: false
        });

        return {
          order,
          client: { client_id: clientId },
          isExistingOrder: false
        };
      }
    } catch (error) {
      console.error('Error creating guest order:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –≥–æ—Å—Ç—è');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
   */
  async getUserOrders(userId) {
    try {
      console.log(`üîç Fetching orders for user ${userId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ transactions
      const dateFrom = '2025-08-01';
      const dateTo = new Date().toISOString().split('T')[0];
      
      const response = await axios.get(
        `${this.baseUrl}/dash.getTransactions?token=${this.getToken()}&dateFrom=${dateFrom}&dateTo=${dateTo}`
      );
      
      console.log(`üìä API response status: ${response.status}`);
      console.log(`üìä Total transactions in response: ${response.data?.response?.length || 0}`);
      console.log(`üìä First 5 transactions:`, response.data?.response?.slice(0, 5));
      
      if (response.data && response.data.response) {
                 // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ client_id –∏ —Å—Ç–∞—Ç—É—Å—É (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
         const userOrders = response.data.response.filter(order => {
           console.log(`üîç Checking transaction: client_id=${order.client_id}, status=${order.status}, userId=${userId}`);
           return order.client_id.toString() === userId.toString() && 
                  (order.status === '0' || order.status === 0 || 
                   order.status === '1' || order.status === 1);
         });
        
        console.log(`‚úÖ Found ${userOrders.length} unpaid orders for user ${userId}`);
        return userOrders;
      }
      
      console.log(`‚ö†Ô∏è No response data for user ${userId}`);
      return [];
    } catch (error) {
      console.error('Error fetching user orders:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
   */
  async getOrderDetails(transactionId) {
    try {
      console.log(`üîç Fetching order details for transaction ${transactionId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactionResponse = await axios.get(
        `${this.baseUrl}/dash.getTransaction?token=${this.getToken()}&transaction_id=${transactionId}`
      );
      
      console.log(`üìä Transaction response:`, transactionResponse.data);
      
      if (!transactionResponse.data || !transactionResponse.data.response) {
        console.log(`‚ö†Ô∏è No transaction data for ${transactionId}`);
        return null;
      }
      
      const transaction = transactionResponse.data.response;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint
      const productsResponse = await axios.get(
        `${this.baseUrl}/dash.getTransactionProducts?token=${this.getToken()}&transaction_id=${transactionId}`
      );
      
      console.log(`üìä Products response:`, productsResponse.data);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const orderDetails = {
        ...transaction,
        products: productsResponse.data?.response || []
      };
      
      // –ï—Å–ª–∏ products - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
      if (orderDetails.products && typeof orderDetails.products === 'object' && !Array.isArray(orderDetails.products)) {
        orderDetails.products = Object.values(orderDetails.products);
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
      if (orderDetails.products && Array.isArray(orderDetails.products)) {
        orderDetails.products = orderDetails.products.map(product => ({
          ...product,
          price: product.product_sum || product.price, // –ò—Å–ø–æ–ª—å–∑—É–µ–º product_sum –∫–∞–∫ —Ü–µ–Ω—É
          count: product.num || product.count // –ò—Å–ø–æ–ª—å–∑—É–µ–º num –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        }));
      }
      
      return orderDetails;
    } catch (error) {
      console.error('Error fetching order details:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤)
   */
  async findActiveOrder(userId) {
    try {
      console.log(`üîç Finding active order for user ${userId}`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      const sixHoursAgo = new Date();
      sixHoursAgo.setHours(sixHoursAgo.getHours() - 6);
      const dateFrom = sixHoursAgo.toISOString().split('T')[0];
      const dateTo = new Date().toISOString().split('T')[0];
      
      const response = await axios.get(
        `${this.baseUrl}/dash.getTransactions?token=${this.getToken()}&dateFrom=${dateFrom}&dateTo=${dateTo}`
      );
      
      if (response.data && response.data.response) {
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å 0 –∏–ª–∏ 1) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const activeOrders = response.data.response.filter(order => {
          const isUserOrder = order.client_id.toString() === userId.toString();
          const isActive = order.status === '0' || order.status === 0 || 
                          order.status === '1' || order.status === 1;
          const isRecent = new Date(parseInt(order.date_start)) > sixHoursAgo;
          
          console.log(`üîç Checking order ${order.transaction_id}: user=${isUserOrder}, active=${isActive}, recent=${isRecent}`);
          
          return isUserOrder && isActive && isRecent;
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∑–∞–∫–∞–∑
        if (activeOrders.length > 0) {
          const latestOrder = activeOrders.reduce((latest, current) => {
            return parseInt(current.date_start) > parseInt(latest.date_start) ? current : latest;
          });
          
          console.log(`‚úÖ Found active order ${latestOrder.transaction_id} for user ${userId}`);
          return latestOrder;
        }
      }
      
      console.log(`‚ö†Ô∏è No active orders found for user ${userId}`);
      return null;
    } catch (error) {
      console.error('Error finding active order:', error);
      return null;
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
   */
  async addToExistingOrder(transactionId, items) {
    try {
      console.log(`üîç Adding items to existing order ${transactionId}:`, items);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const currentProductsResponse = await axios.get(
        `${this.baseUrl}/dash.getTransactionProducts?token=${this.getToken()}&transaction_id=${transactionId}`
      );
      
      let currentProducts = [];
      if (currentProductsResponse.data?.response) {
        // –ï—Å–ª–∏ products - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
        if (typeof currentProductsResponse.data.response === 'object' && !Array.isArray(currentProductsResponse.data.response)) {
          currentProducts = Object.values(currentProductsResponse.data.response);
        } else {
          currentProducts = currentProductsResponse.data.response;
        }
      }
      
      console.log(`üìä Current products in order:`, currentProducts);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
      const newProducts = items.map(item => {
        let price = item.price;
        if (typeof price === 'object' && price !== null) {
          price = price['1'] || Object.values(price)[0] || 0;
        }
        price = parseFloat(price) || 0;

        return {
          product_id: item.product_id,
          count: item.quantity,
          price: Math.round(price * 100) // Poster API –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        };
      });
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
      const allProducts = [...currentProducts, ...newProducts];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ product_id –∏ —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const groupedProducts = {};
      allProducts.forEach(product => {
        const key = product.product_id;
        if (groupedProducts[key]) {
          groupedProducts[key].count += product.count;
        } else {
          groupedProducts[key] = { ...product };
        }
      });
      
      const finalProducts = Object.values(groupedProducts);
      console.log(`üì¶ Final products for order:`, finalProducts);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
      const updatePayload = {
        products: finalProducts
      };
      
      const response = await axios.post(
        `${this.baseUrl}/incomingOrders.updateIncomingOrder?token=${this.getToken()}&incoming_order_id=${transactionId}`,
        updatePayload,
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log('Order update response:', response.data);
      
      if (response.data && response.data.response) {
        return response.data.response;
      }
      
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    } catch (error) {
      console.error('Error adding to existing order:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É: ' + (error.response?.data?.error || error.message));
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getUserPastOrders(userId, limit = 10, offset = 0) {
    try {
      console.log(`üîç Fetching past orders for user ${userId}, limit=${limit}, offset=${offset}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ transactions
      const dateFrom = '2025-08-01';
      const dateTo = new Date().toISOString().split('T')[0];
      
      const response = await axios.get(
        `${this.baseUrl}/dash.getTransactions?token=${this.getToken()}&dateFrom=${dateFrom}&dateTo=${dateTo}`
      );
      
      if (response.data && response.data.response) {
                 // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ client_id –∏ —Å—Ç–∞—Ç—É—Å—É (–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ)
         const userOrders = response.data.response.filter(order => {
           console.log(`üîç Checking past transaction: client_id=${order.client_id}, status=${order.status}, userId=${userId}`);
           return order.client_id.toString() === userId.toString() && 
                  (order.status === '2' || order.status === 2);
         });
        
        console.log(`‚úÖ Found ${userOrders.length} past orders for user ${userId}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const paginatedOrders = userOrders.slice(offset, offset + limit);
        console.log(`üìÑ Returning ${paginatedOrders.length} orders (paginated)`);
        
        return paginatedOrders;
      }
      
      console.log(`‚ö†Ô∏è No response data for past orders user ${userId}`);
      return [];
    } catch (error) {
      console.error('Error fetching user past orders:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }
}

module.exports = new OrderService();
