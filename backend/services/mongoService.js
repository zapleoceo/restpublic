const { MongoClient } = require('mongodb');

class MongoService {
  constructor() {
    this.client = null;
    this.db = null;
    this.isConnected = false;
  }

  async connect() {
    try {
      const mongoUrl = process.env.MONGODB_URL || 'mongodb://127.0.0.1:27017';
      const dbName = process.env.MONGODB_DB || 'goodzone';
      
      console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: ${mongoUrl}/${dbName}`);
      
      this.client = new MongoClient(mongoUrl);
      await this.client.connect();
      this.db = this.client.db(dbName);
      this.isConnected = true;
      
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await this.createIndexes();
      
      return this.db;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }

  async createIndexes() {
    try {
      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ —è–∑—ã–∫—É
      await this.db.collection('translations').createIndex({ language: 1 }, { unique: true });
      
      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ —Ç–∏–ø—É
      await this.db.collection('configs').createIndex({ type: 1 }, { unique: true });
      
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã MongoDB —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
    }
  }

  getDatabase() {
    if (!this.isConnected || !this.db) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return this.db;
  }

  async disconnect() {
    if (this.client) {
      await this.client.close();
      this.isConnected = false;
      console.log('‚úÖ MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ï–†–ï–í–û–î–û–í ===
  
  async getTranslations(language) {
    const db = this.getDatabase();
    const translation = await db.collection('translations').findOne({ language });
    return translation ? translation.data : null;
  }

  async setTranslations(language, data) {
    const db = this.getDatabase();
    const result = await db.collection('translations').replaceOne(
      { language },
      {
        language,
        data,
        updatedAt: new Date(),
        version: 1
      },
      { upsert: true }
    );
    return result;
  }

  async getAllTranslations() {
    const db = this.getDatabase();
    const translations = await db.collection('translations').find({}).toArray();
    const result = {};
    translations.forEach(t => {
      result[t.language] = t.data;
    });
    return result;
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ===
  
  async getConfig(type) {
    const db = this.getDatabase();
    const config = await db.collection('configs').findOne({ type });
    return config ? config.data : null;
  }

  async setConfig(type, data) {
    const db = this.getDatabase();
    const result = await db.collection('configs').replaceOne(
      { type },
      {
        type,
        data,
        updatedAt: new Date(),
        version: 1
      },
      { upsert: true }
    );
    return result;
  }

  async getAllConfigs() {
    const db = this.getDatabase();
    const configs = await db.collection('configs').find({}).toArray();
    const result = {};
    configs.forEach(c => {
      result[c.type] = c.data;
    });
    return result;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const mongoService = new MongoService();
module.exports = mongoService;
