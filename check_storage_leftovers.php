<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php check_storage_leftovers.php [storage_id]
 * 
 * –ï—Å–ª–∏ storage_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–∫–ª–∞–¥—ã
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require_once 'vendor/autoload.php';
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
$api_token = $_ENV['POSTER_API_TOKEN'] ?? '922371:489411264005b482039f38b8ee21f6fb';
$api_base = 'https://joinposter.com/api';

// –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$storage_id = $argv[1] ?? null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logMessage($message, $level = 'INFO') {
    $timestamp = date('Y-m-d H:i:s');
    echo "[$timestamp] [$level] $message\n";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeApiRequest($url, $method = 'GET', $data = null) {
    $ch = curl_init();
    
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/x-www-form-urlencoded'
    ]);
    
    if ($method === 'POST' && $data) {
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
    }
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curl_error = curl_error($ch);
    curl_close($ch);
    
    if ($curl_error) {
        throw new Exception("CURL Error: " . $curl_error);
    }
    
    if ($http_code !== 200) {
        throw new Exception("HTTP Error: " . $http_code . " Response: " . $response);
    }
    
    return json_decode($response, true);
}

try {
    logMessage("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö");
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    $storages_url = $api_base . '/storage.getStorages?token=' . $api_token;
    $storages_data = makeApiRequest($storages_url);
    
    if (!isset($storages_data['response'])) {
        throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤");
    }
    
    $storages = $storages_data['response'];
    logMessage("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: " . count($storages));
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫–ª–∞–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if ($storage_id) {
        $storages = array_filter($storages, function($storage) use ($storage_id) {
            return $storage['storage_id'] == $storage_id;
        });
        
        if (empty($storages)) {
            throw new Exception("–°–∫–ª–∞–¥ —Å ID $storage_id –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
    
    $total_positive_items = 0;
    $total_items = 0;
    
    foreach ($storages as $storage) {
        $storage_id = $storage['storage_id'];
        $storage_name = $storage['storage_name'];
        
        logMessage("\nüì¶ –°–∫–ª–∞–¥: $storage_name (ID: $storage_id)");
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
        $leftovers_url = $api_base . '/storage.getStorageLeftovers?token=' . $api_token . '&storage_id=' . $storage_id;
        $leftovers_data = makeApiRequest($leftovers_url);
        
        if (!isset($leftovers_data['response'])) {
            logMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ $storage_name", 'ERROR');
            continue;
        }
        
        $leftovers = $leftovers_data['response'];
        $positive_items = 0;
        $zero_items = 0;
        
        logMessage("üìã –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ: " . count($leftovers));
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        $by_type = [];
        foreach ($leftovers as $item) {
            $quantity = $item['storage_ingredient_left'] ?? 0;
            $type = $item['ingredients_type'] ?? 'unknown';
            
            if (!isset($by_type[$type])) {
                $by_type[$type] = ['positive' => 0, 'zero' => 0, 'items' => []];
            }
            
            if ($quantity > 0) {
                $positive_items++;
                $by_type[$type]['positive']++;
                $by_type[$type]['items'][] = [
                    'name' => $item['ingredient_name'],
                    'quantity' => $quantity,
                    'unit' => $item['ingredient_unit']
                ];
            } else {
                $zero_items++;
                $by_type[$type]['zero']++;
            }
        }
        
        $total_positive_items += $positive_items;
        $total_items += count($leftovers);
        
        logMessage("‚úÖ –ü–æ–∑–∏—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: $positive_items");
        logMessage("‚ö™ –ü–æ–∑–∏—Ü–∏–π –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: $zero_items");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º
        foreach ($by_type as $type => $data) {
            if ($data['positive'] > 0) {
                $type_name = match($type) {
                    1 => '–¢–æ–≤–∞—Ä—ã',
                    4 => '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
                    5 => '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã',
                    default => "–¢–∏–ø $type"
                };
                
                logMessage("  üìÅ $type_name: {$data['positive']} –ø–æ–∑–∏—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ø–æ–∑–∏—Ü–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                usort($data['items'], function($a, $b) {
                    return $b['quantity'] <=> $a['quantity'];
                });
                
                $top_items = array_slice($data['items'], 0, 5);
                foreach ($top_items as $item) {
                    logMessage("    - {$item['name']}: {$item['quantity']} {$item['unit']}");
                }
            }
        }
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logMessage("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    logMessage("  - –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: " . count($storages));
    logMessage("  - –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: $total_items");
    logMessage("  - –ü–æ–∑–∏—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: $total_positive_items");
    logMessage("  - –ü–æ–∑–∏—Ü–∏–π –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤: " . ($total_items - $total_positive_items));
    
    if ($total_positive_items > 0) {
        logMessage("\nüí° –î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ 1 –Ω–∞ —Å–∫–ª–∞–¥ 3 –∑–∞–ø—É—Å—Ç–∏—Ç–µ:");
        logMessage("   php move_storage_leftovers.php");
    } else {
        logMessage("\n‚ÑπÔ∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è");
    }
    
} catch (Exception $e) {
    logMessage("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage(), 'ERROR');
    exit(1);
}
?>
