<?php
/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é
 */

echo "<h1>üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é</h1>\n";
echo "<style>body{font-family:monospace;margin:20px;} .ok{color:green;} .error{color:red;} .warning{color:orange;}</style>\n";

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB –Ω–∞–ø—Ä—è–º—É—é
echo "<h2>1. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MongoDB</h2>\n";
try {
    require_once __DIR__ . '/vendor/autoload.php';
    if (class_exists('MongoDB\Client')) {
        echo "<span class='ok'>‚úÖ MongoDB –¥—Ä–∞–π–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω</span><br>\n";
        
        $client = new MongoDB\Client("mongodb://localhost:27017");
        $db = $client->northrepublic;
        $collection = $db->menu;
        
        $result = $collection->findOne(['_id' => 'current_menu']);
        if ($result) {
            echo "<span class='ok'>‚úÖ –ö—ç—à –Ω–∞–π–¥–µ–Ω –≤ MongoDB</span><br>\n";
            echo "üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: " . count($result['categories'] ?? []) . "<br>\n";
            echo "üìä –ü—Ä–æ–¥—É–∫—Ç—ã: " . count($result['products'] ?? []) . "<br>\n";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (!empty($result['categories'])) {
                echo "<h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫—ç—à–µ:</h3>\n";
                foreach (array_slice($result['categories'], 0, 5) as $category) {
                    echo "- " . ($category['category_name'] ?? $category['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') . " (ID: " . ($category['category_id'] ?? '–Ω–µ—Ç') . ")<br>\n";
                }
            }
        } else {
            echo "<span class='warning'>‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç –≤ MongoDB</span><br>\n";
        }
    } else {
        echo "<span class='error'>‚ùå MongoDB –¥—Ä–∞–π–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span><br>\n";
    }
} catch (Exception $e) {
    echo "<span class='error'>‚ùå MongoDB –æ—à–∏–±–∫–∞: " . $e->getMessage() . "</span><br>\n";
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ MenuCache
echo "<h2>2. –ü—Ä–æ–≤–µ—Ä–∫–∞ MenuCache</h2>\n";
try {
    require_once __DIR__ . '/php/classes/MenuCache.php';
    $menuCache = new MenuCache();
    echo "<span class='ok'>‚úÖ MenuCache —Å–æ–∑–¥–∞–Ω</span><br>\n";
    
    $menuData = $menuCache->getMenu();
    if ($menuData) {
        echo "<span class='ok'>‚úÖ MenuCache.getMenu() —Ä–∞–±–æ—Ç–∞–µ—Ç</span><br>\n";
        echo "üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: " . count($menuData['categories']) . "<br>\n";
        echo "üìä –ü—Ä–æ–¥—É–∫—Ç—ã: " . count($menuData['products']) . "<br>\n";
    } else {
        echo "<span class='warning'>‚ö†Ô∏è MenuCache.getMenu() –≤–µ—Ä–Ω—É–ª null</span><br>\n";
    }
} catch (Exception $e) {
    echo "<span class='error'>‚ùå MenuCache –æ—à–∏–±–∫–∞: " . $e->getMessage() . "</span><br>\n";
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
echo "<h2>3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API</h2>\n";
$api_url = 'https://northrepublic.me:3002/api/menu';
$context = stream_context_create([
    'http' => [
        'timeout' => 10,
        'method' => 'GET'
    ]
]);

$response = @file_get_contents($api_url, false, $context);
if ($response !== false) {
    echo "<span class='ok'>‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω</span><br>\n";
    $data = json_decode($response, true);
    if ($data) {
        echo "üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: " . count($data['categories'] ?? []) . "<br>\n";
        echo "üìä –ü—Ä–æ–¥—É–∫—Ç—ã: " . count($data['products'] ?? []) . "<br>\n";
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!empty($data['categories'])) {
            echo "<h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API:</h3>\n";
            foreach (array_slice($data['categories'], 0, 5) as $category) {
                echo "- " . ($category['category_name'] ?? $category['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') . " (ID: " . ($category['category_id'] ?? '–Ω–µ—Ç') . ")<br>\n";
            }
        }
    }
} else {
    echo "<span class='error'>‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span><br>\n";
}

// 4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ index.php
echo "<h2>4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ index.php)</h2>\n";
$categories = [];
$products = [];
$productsByCategory = [];

try {
    require_once __DIR__ . '/vendor/autoload.php';
    if (class_exists('MongoDB\Client')) {
        require_once __DIR__ . '/php/classes/MenuCache.php';
        $menuCache = new MenuCache();
        $menuData = $menuCache->getMenu();
        $categories = $menuData ? $menuData['categories'] : [];
        $products = $menuData ? $menuData['products'] : [];
        
        // Group products by category
        if ($products) {
            foreach ($products as $product) {
                $categoryId = (string)($product['menu_category_id'] ?? $product['category_id'] ?? 'default');
                if (!isset($productsByCategory[$categoryId])) {
                    $productsByCategory[$categoryId] = [];
                }
                $productsByCategory[$categoryId][] = $product;
            }
        }
    }
} catch (Exception $e) {
    echo "<span class='error'>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " . $e->getMessage() . "</span><br>\n";
}

echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:<br>\n";
echo "- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: " . count($categories) . "<br>\n";
echo "- –ü—Ä–æ–¥—É–∫—Ç—ã: " . count($products) . "<br>\n";
echo "- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: " . count($productsByCategory) . " –∫–∞—Ç–µ–≥–æ—Ä–∏–π<br>\n";

if (!empty($categories)) {
    echo "<h3>–ü–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</h3>\n";
    foreach (array_slice($categories, 0, 3) as $category) {
        $categoryId = $category['category_id'];
        $productCount = count($productsByCategory[$categoryId] ?? []);
        echo "- " . ($category['category_name'] ?? $category['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') . " (ID: $categoryId, –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $productCount)<br>\n";
    }
}

echo "<h2>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>\n";
echo "<ul>\n";
echo "<li>–ï—Å–ª–∏ MongoDB –ø—É—Å—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: <code>php force-update-cache.php</code></li>\n";
echo "<li>–ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: <code>pm2 status</code></li>\n";
echo "<li>–ï—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: <code>sudo systemctl start mongodb</code></li>\n";
echo "</ul>\n";

echo "<p><a href='index.php'>üîó –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a> | <a href='php/menu.php'>üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é</a></p>\n";
?>
