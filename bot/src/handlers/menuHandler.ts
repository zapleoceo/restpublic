import { Context } from 'telegraf';
import posterService from '../services/posterService.js';
import { formatPrice, getMainPrice } from '../utils/priceUtils.js';
import { groupProductsByCategory, getCategoryById } from '../utils/menuUtils.js';

export const menuHandler = {
  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  async showMainMenu(ctx: Context) {
    try {
      const categories = await posterService.getCategories();
      
      if (!categories || categories.length === 0) {
        await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      const message = 'üçΩÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n' +
        categories.map(category => 
          `‚Ä¢ ${category.category_name}`
        ).join('\n');

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing main menu:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  async showAllProducts(ctx: Context) {
    try {
      const categories = await posterService.getCategories();
      const allProducts = await posterService.getProducts();
      
      if (!categories || categories.length === 0 || !allProducts || allProducts.length === 0) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      let message = 'üçΩÔ∏è *–ú–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n\n';
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      const groupedCategories = groupProductsByCategory(categories, allProducts);
      
      for (const category of groupedCategories) {
        message += `üìã *${category.category_name}:*\n`;
        
        category.products.forEach(product => {
          const mainPrice = getMainPrice(product.price);
          const formattedPrice = formatPrice(mainPrice);
          message += `üçΩÔ∏è ${product.product_name}\nüí∞ ${formattedPrice} ‚Ç´\n\n`;
        });
        
        message += '---\n';
      }

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing all products:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async showCategoryProducts(ctx: Context, categoryId: number) {
    try {
      const products = await posterService.getProducts(categoryId);
      const categories = await posterService.getCategories();
      const category = getCategoryById(categoryId.toString(), categories);
      
      if (!products || products.length === 0) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      const categoryName = category ? category.category_name : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
      let message = `üçΩÔ∏è *${categoryName}:*\n\n`;
      
      products.forEach(product => {
        const mainPrice = getMainPrice(product.price);
        const formattedPrice = formatPrice(mainPrice);
        message += `üçΩÔ∏è ${product.product_name}\nüí∞ ${formattedPrice} ‚Ç´\n\n`;
      });

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Error showing category products:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–±–µ–∑ —Å–∞–π—Ç–æ–≤)
  async showContact(ctx: Context) {
    const contactMessage = 
      'üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã North Republic*\n\n' +
      'üìç *–ú—ã —Ç—É—Ç:* https://maps.app.goo.gl/Hgbn5n83PA11NcqLA\n' +
      'üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* +84 349 338 758';

    await ctx.reply(contactMessage, { parse_mode: 'Markdown' });
  }
};
