import { Telegraf, Markup, session, Context } from 'telegraf';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import { menuHandler } from './handlers/menuHandler.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  returnUrl?: string;
  authMode?: boolean;
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Å—Å–∏–π
interface MyContext extends Context {
  session?: SessionData;
}

const bot = new Telegraf<MyContext>(process.env.TELEGRAM_BOT_TOKEN!);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (—É–±–∏—Ä–∞–µ–º /menu)
bot.telegram.setMyCommands([
  { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: 'categories', description: 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥' },
  { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' }
]);

// –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
const mainKeyboard = Markup.keyboard([
  ['üçΩÔ∏è –ú–µ–Ω—é', 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'],
  ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
]).resize();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
const contactKeyboard = Markup.keyboard([
  [Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')],
  ['‚ùå –û—Ç–º–µ–Ω–∞']
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º chat_id –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π SePay
  const chat = ctx.chat;
  const username = 'username' in chat ? chat.username : 'N/A';
  const firstName = 'first_name' in chat ? chat.first_name : '';
  const lastName = 'last_name' in chat ? chat.last_name : '';
  console.log(`üÜî Chat ID: ${chat.id}, Username: @${username || 'N/A'}, Name: ${firstName || ''} ${lastName || ''}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã start
  const startPayload = ctx.message.text.split(' ')[1];
  
  if (startPayload && startPayload.startsWith('auth_')) {
    // –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const returnUrl = startPayload.replace('auth_', '');
    console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram. Return URL: ${returnUrl}`);
    
    await ctx.reply(
      'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ GoodZone, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
      contactKeyboard
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º return URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session = { ...ctx.session, returnUrl, authMode: true };
  } else {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    await ctx.reply(
      'üçú –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ North Republic!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories
bot.command('categories', async (ctx) => {
  await menuHandler.showMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const helpMessage = 
    'ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n' +
    'üçΩÔ∏è *–ú–µ–Ω—é* - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–ª—é–¥–∞\n' +
    'üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏* - –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥\n' +
    'üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\n' +
    '‚ùì *–ü–æ–º–æ—â—å* - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!';

  await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
bot.on('contact', async (ctx) => {
  const contact = ctx.message.contact;
  const session = ctx.session;
  
  console.log(`üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${contact.phone_number}, ${contact.first_name} ${contact.last_name || ''}`);
  
  if (session?.authMode && session?.returnUrl) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend
      const backendUrl = process.env.BACKEND_URL || 'https://goodzone.zapleo.com';
      const response = await fetch(`${backendUrl}/api/auth/telegram-callback`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: contact.phone_number,
          name: contact.first_name,
          lastName: contact.last_name || '',
          birthday: '',
          sessionToken: session.returnUrl
        })
      });
      
      const result = await response.json() as any;
      
      if (result.success) {
        await ctx.reply(
          '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
          mainKeyboard
        );
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        ctx.session = { ...ctx.session, authMode: false, returnUrl: undefined };
      } else {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          mainKeyboard
        );
      }
    } catch (error) {
      console.error('Error in telegram auth callback:', error);
      await ctx.reply(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        mainKeyboard
      );
    }
  } else {
    // –û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    await ctx.reply(
      'üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
bot.hears('üçΩÔ∏è –ú–µ–Ω—é', async (ctx) => {
  await menuHandler.showAllProducts(ctx);
});

bot.hears('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', async (ctx) => {
  await menuHandler.showMainMenu(ctx);
});

bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', async (ctx) => {
  await menuHandler.showContact(ctx);
});

bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  // –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (ctx.session?.authMode) {
    ctx.session = { ...ctx.session, authMode: false, returnUrl: undefined };
    await ctx.reply(
      '‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
      mainKeyboard
    );
  } else {
    await ctx.reply(
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.',
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  // –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º chat_id –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π SePay
  const chat = ctx.chat;
  const username = 'username' in chat ? chat.username : 'N/A';
  const firstName = 'first_name' in chat ? chat.first_name : '';
  const lastName = 'last_name' in chat ? chat.last_name : '';
  console.log(`üÜî Chat ID: ${chat.id}, Username: @${username || 'N/A'}, Name: ${firstName || ''} ${lastName || ''}, Text: ${ctx.message.text}`);
  
  if (ctx.session?.authMode) {
    await ctx.reply(
      'üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∏–ª–∏ "‚ùå –û—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
      contactKeyboard
    );
  } else {
    await ctx.reply(
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.',
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startBot();