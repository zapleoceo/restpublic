// Cart functionality
class Cart {
    constructor() {
        this.items = JSON.parse(localStorage.getItem('cart') || '[]');
        if (!Array.isArray(this.items)) {
            this.items = [];
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ —É–¥–∞–ª–µ–Ω–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        this.isSubmittingOrder = false;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        this.translations = null;
        this.init();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    formatNumber(num) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null, undefined –∏ NaN
        if (num === null || num === undefined || isNaN(num)) {
            console.warn('‚ö†Ô∏è formatNumber received invalid value:', num);
            return '0';
        }
        return num.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    async executeApiCall(apiCall) {
        return await apiCall();
    }
    
    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        await this.loadTranslations();
        this.bindEvents();
        this.updateCartDisplay();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã
        this.updateCartModalTranslations();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(async () => {
            await this.reloadTranslations();
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            this.updateCartModalTranslations();
        }, 100);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            console.log('üõí Cart: Final attempt to update modal translations');
            this.updateCartModalTranslations();
        }, 2000);
    }

    async loadTranslations() {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ CartTranslations –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        let attempts = 0;
        while (!window.cartTranslations && attempts < 10) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (window.cartTranslations) {
            this.translations = await window.cartTranslations.load();
            console.log('üõí Cart: Loaded translations:', this.translations);
            console.log('üõí Cart: Current language:', window.cartTranslations.language);
        } else {
            console.error('üõí Cart: CartTranslations not available after 1 second');
            this.setDefaultTranslations();
        }
    }
    
    setDefaultTranslations() {
        this.translations = {
            'your_order': '–í–∞—à –∑–∞–∫–∞–∑',
            'for_table': '–ù–∞ —Å—Ç–æ–ª–∏–∫',
            'takeaway': '–° —Å–æ–±–æ–π',
            'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞',
            'total': '–ò—Ç–æ–≥–æ:',
            'enter_name': '–í–∞—à–µ –∏–º—è',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'table': '–°—Ç–æ–ª',
            'delivery_address': '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å—Å—ã–ª–∫–∞ –Ω–∞ Google –∫–∞—Ä—Ç—É)',
            'delivery_address_placeholder': 'https://maps.google.com/...',
            'delivery_time': '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
            'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            'comment_placeholder': '–°—é–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã, —á—Ç–æ–±—ã –º—ã —É—á–ª–∏',
            'cancel': '–û—Ç–º–µ–Ω–∞',
            'place_order': '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
            'enter_name_placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
            'phone_placeholder': '+'
        };
        console.log('üõí Cart: Using default translations');
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    async reloadTranslations() {
        if (window.cartTranslations) {
            this.translations = await window.cartTranslations.reload();
            console.log('üõí Cart: Reloaded translations:', this.translations);
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
            this.updateCartDisplay();
            // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã
            this.updateCartModalTranslations();
        }
    }

    t(key, fallback = null) {
        console.log(`üõí Cart: Looking for translation key '${key}'`);
        console.log(`üõí Cart: Available translations:`, this.translations);
        
        if (this.translations && this.translations[key]) {
            console.log(`üõí Cart: Found translation for '${key}':`, this.translations[key]);
            return this.translations[key];
        }
        console.warn(`üõí Cart: Missing translation for '${key}', using fallback:`, fallback || key);
        return fallback || key;
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    highlightField(fieldId, duration = 3000) {
        const field = document.getElementById(fieldId);
        if (!field) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        field.classList.add('validation-error');
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            field.classList.remove('validation-error');
        }, duration);
    }

    bindEvents() {
        // Cart icon click
        document.getElementById('cartIcon')?.addEventListener('click', () => {
            this.toggleCart();
        });

        // Quantity buttons (delegated event handling)
        document.addEventListener('click', async (e) => {
            if (e.target.classList.contains('quantity-btn')) {
                e.preventDefault();
                const btn = e.target;
                const cartItem = btn.closest('.cart-item');
                const productId = cartItem.dataset.productId;
                const isIncrease = btn.textContent === '+';
                
                if (productId) {
                    const currentQuantity = parseInt(cartItem.querySelector('.cart-item-quantity span').textContent);
                    const newQuantity = isIncrease ? currentQuantity + 1 : currentQuantity - 1;
                    await this.updateQuantity(productId, newQuantity);
                }
            }
        });

        // Add to cart buttons
        document.addEventListener('click', (e) => {
            if (e.target.closest('.add-to-cart-btn')) {
                const btn = e.target.closest('.add-to-cart-btn');
                const productData = JSON.parse(btn.dataset.product);
                this.addItem(productData);
                this.highlightCart();
            }
        });

        // Auth icon click - handled by AuthSystem
        // document.getElementById('authIcon')?.addEventListener('click', () => {
        //     this.showAuthModal();
        // });
    }

    addItem(product) {
        const existingItem = this.items.find(item => item.id === product.id);
        const wasNewItem = !existingItem;
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É 0 - –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Poster API —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
            this.items.push({
                id: product.id,
                name: product.name,
                price: 0, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Poster API
                quantity: 1,
                image: product.image
            });
        }
        
        this.saveCart();
        
        // –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        if (wasNewItem) {
            this.updateCartDisplay();
        } else {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            this.updateAllCartElements();
        }
    }

    removeItem(productId) {
        this.items = this.items.filter(item => item.id !== productId);
        this.saveCart();
        this.updateCartDisplay();
    }

    async updateQuantity(productId, quantity) {
        console.log(`updateQuantity called: productId=${productId}, quantity=${quantity}`);
        const item = this.items.find(item => item.id == productId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º == –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞
        console.log(`Found item:`, item);
        
        if (item) {
            const oldQuantity = item.quantity;
            console.log(`Old quantity: ${oldQuantity}, new quantity: ${quantity}`);
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ - —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            if (quantity < 0) {
                this.removeItem(productId);
                return;
            }
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä, –Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            item.quantity = quantity;
            this.saveCart();
            
            console.log(`Item quantity updated to: ${item.quantity}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
            try {
                console.log('About to call updateAllCartElements()');
                this.updateAllCartElements();
                console.log('updateAllCartElements() completed successfully');
            } catch (error) {
                console.error('Error in updateAllCartElements():', error);
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0
            if (quantity > 0) {
                await this.syncQuantityChange(productId, oldQuantity, quantity);
            }
        } else {
            console.log(`Item not found for productId: ${productId}`);
        }
    }

    clearCart() {
        this.items = [];
        this.saveCart();
        this.updateCartDisplay();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ HTML
    updateAllCartElements() {
        try {
            console.log('updateAllCartElements called');
            console.log('Current items:', this.items);
        
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        const cartItemsList = document.getElementById('cartItemsList');
        console.log('cartItemsList found:', !!cartItemsList);
        
        if (cartItemsList) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
            const allCartItems = cartItemsList.querySelectorAll('.cart-item');
            console.log('Found cart items in DOM:', allCartItems.length);
            
            this.items.forEach(item => {
                console.log(`Looking for product ID: ${item.id} (type: ${typeof item.id})`);
                
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID –¢–û–õ–¨–ö–û –≤ –º–æ–¥–∞–ª–∫–µ –∫–æ—Ä–∑–∏–Ω—ã (–ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
                const cartItem = cartItemsList.querySelector(`[data-product-id="${String(item.id)}"]`);
                console.log(`Cart item found for ${item.id}:`, !!cartItem);
                
                if (cartItem) {
                    console.log(`Cart item HTML structure for ${item.id}:`, cartItem.outerHTML);
                    
                    const quantitySpan = cartItem.querySelector('.cart-item-quantity span');
                    console.log(`Quantity span found for ${item.id}:`, !!quantitySpan);
                    
                    if (quantitySpan) {
                        const oldValue = quantitySpan.textContent;
                        quantitySpan.textContent = item.quantity;
                        console.log(`Updated quantity for product ${item.id}: ${oldValue} -> ${item.quantity}`);
                    } else {
                        console.log(`Quantity span not found for product ${item.id}`);
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                        const altSelectors = [
                            '.cart-item-quantity',
                            '.quantity',
                            '.qty',
                            '[class*="quantity"]',
                            '[class*="qty"]'
                        ];
                        
                        for (const selector of altSelectors) {
                            const element = cartItem.querySelector(selector);
                            if (element) {
                                console.log(`Found alternative element with selector "${selector}":`, element);
                                console.log(`Element HTML:`, element.outerHTML);
                            }
                        }
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É)
                    const priceElement = cartItem.querySelector('.cart-item-price');
                    if (priceElement) {
                        const displayPrice = item.originalPrice || item.price;
                        priceElement.textContent = `${this.formatNumber(displayPrice)} ‚Ç´`;
                        console.log(`Updated price for product ${item.id}: ${displayPrice} (original price displayed)`);
                    }
                } else {
                    console.log(`Cart item not found for product ID: ${item.id}`);
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                    const alternativeItem = cartItemsList.querySelector(`[data-product-id="${item.id}"]`);
                    console.log(`Alternative search for ${item.id}:`, !!alternativeItem);
                }
            });
        }

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
        this.updateCartIcon();

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        const cartTotal = document.querySelector('.cart-total');
        if (cartTotal) {
            this.updateTotalDisplay();
        }
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
        this.updateDiscountInfo();
        } catch (error) {
            console.error('Error in updateAllCartElements:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–¥–∫–µ
    updateDiscountInfo() {
        const discountInfo = document.querySelector('.discount-info .discount-text');
        if (!discountInfo) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å–∫–∏–¥–∫–æ–π
        if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
            const clientDiscount = window.authSystem.userData.max_discount || 0;
            if (clientDiscount > 0) {
                discountInfo.textContent = `-${clientDiscount}% —Å–∫–∏–¥–∫–∞ –¥–ª—è –≤–∞—Å`;
                discountInfo.style.color = '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∫–∏–¥–∫–∏
            } else {
                // –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞
                discountInfo.style.display = 'none';
            }
        } else {
            // –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞
            discountInfo.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã (—Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤)
    updateCartIcon() {
        const cartCount = document.getElementById('cartCount');
        const cartIcon = document.getElementById('cartIcon');
        const cartIconImg = document.querySelector('.cart-icon-img');

        const totalItems = this.items.reduce((sum, item) => sum + item.quantity, 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        if (cartCount) {
            cartCount.textContent = totalItems;
            if (totalItems > 0) {
                cartCount.classList.remove('cart-count-hidden');
            } else {
                cartCount.classList.add('cart-count-hidden');
            }
        }

        if (cartIcon && cartIconImg) {
            if (totalItems > 0) {
                cartIcon.classList.add('has-items');
                cartIconImg.src = 'images/icons/cart green.png';
            } else {
                cartIcon.classList.remove('has-items');
                cartIconImg.src = 'images/icons/cart gray.png';
            }
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    async syncQuantityChange(productId, oldQuantity, newQuantity) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
            try {
                const phone = window.authSystem.userData.phone;
                if (phone) {
                    // –ü–æ–ª—É—á–∞–µ–º client_id
                    const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : '';
                    const clientsResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/clients.getClients&phone=${encodeURIComponent(phone)}&token=${window.API_TOKEN}`);
                    
                    if (clientsResponse.ok) {
                        const clientsData = await clientsResponse.json();
                        if (clientsData && clientsData.length > 0) {
                            const clientId = clientsData[0].client_id;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º total_payed_sum –∫–ª–∏–µ–Ω—Ç–∞
                            const clientData = clientsData[0];
                            const totalPaidSum = clientData.total_payed_sum || 0;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            const openTransaction = await this.checkOpenTransactions(clientId);
                            if (openTransaction) {
                                // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (total_payed_sum = 0), –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
                                if (totalPaidSum === 0) {
                                    const discountResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.changeFiscalStatus`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'X-API-Token': window.API_TOKEN
                                        },
                                        body: JSON.stringify({
                                            transaction_id: openTransaction.transaction_id,
                                            fiscal_status: 1 // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 20%
                                        })
                                    });
                                    
                                    if (!discountResponse.ok) {
                                        throw new Error(`Failed to apply discount: ${discountResponse.statusText}`);
                                    }
                                    
                                    console.log(`‚úÖ Discount applied for new client: ${clientId}`);
                                }
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                                const response = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.changeTransactionProductCount`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-API-Token': window.API_TOKEN
                                    },
                                    body: JSON.stringify({
                                        transaction_id: openTransaction.transaction_id,
                                        product_id: parseInt(productId),
                                        count: newQuantity
                                    })
                                });
                                
                                if (!response.ok) {
                                    throw new Error(`Failed to update product count: ${response.statusText}`);
                                }
                                
                                console.log(`‚úÖ Product count synced: ${productId} = ${newQuantity}`);
                            }
                        }
                    }
                }
            } catch (error) {
                console.warn('Failed to sync quantity change:', error);
            }
        }
    }

    getTotal() {
        const subtotal = this.items
            .filter(item => item.quantity > 0)
            .reduce((total, item) => total + (item.price * item.quantity), 0);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.promotionId === 1) {
            return subtotal * 0.8; // 20% —Å–∫–∏–¥–∫–∞
        }
        
        return subtotal;
    }

    getSubtotal() {
        return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
    }

    updateTotalDisplay() {
        const cartTotal = document.querySelector('.cart-total');
        if (!cartTotal) return;
        
        const subtotal = this.getSubtotal();
        const total = this.getTotal();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        let clientDiscount = 0;
        if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
            clientDiscount = window.authSystem.userData.max_discount || 0;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É (–±–µ–∑ —Å–∫–∏–¥–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞)
        const originalTotal = clientDiscount > 0 ? total / (1 - clientDiscount / 100) : total;
        
        if (clientDiscount > 0 && originalTotal > total) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            cartTotal.innerHTML = `
                <div class="total-row discount-row">
                    <span>–°–∫–∏–¥–∫–∞ ${clientDiscount}%:</span>
                    <span class="original-price">${this.formatNumber(originalTotal)} ‚Ç´</span>
                </div>
                <div class="total-row total-final">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span class="total-amount">${this.formatNumber(total)} ‚Ç´</span>
                </div>
            `;
        } else if (this.promotionId === 1 && subtotal > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–±—Ç–æ—Ç–∞–ª, —Å–∫–∏–¥–∫—É –∏ –∏—Ç–æ–≥–æ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ)
            cartTotal.innerHTML = `
                <div class="total-row">
                    <span>–°—É–±—Ç–æ—Ç–∞–ª:</span>
                    <span>${this.formatNumber(subtotal)} ‚Ç´</span>
                </div>
                <div class="total-row discount-row">
                    <span>–°–∫–∏–¥–∫–∞ 20%:</span>
                    <span>-${this.formatNumber(subtotal - total)} ‚Ç´</span>
                </div>
                <div class="total-row total-final">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span class="total-amount">${this.formatNumber(total)} ‚Ç´</span>
                </div>
            `;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ
            cartTotal.innerHTML = `
                <div class="total-row">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span class="total-amount">${this.formatNumber(total)} ‚Ç´</span>
                </div>
            `;
        }
    }

    saveCart() {
        localStorage.setItem('cart', JSON.stringify(this.items));
    }

    updateCartDisplay() {
        const cartCount = document.getElementById('cartCount');
        const cartIcon = document.getElementById('cartIcon');
        const cartIconImg = document.querySelector('.cart-icon-img');
        const cartItemsList = document.getElementById('cartItemsList');
        const cartTotalAmount = document.getElementById('cartTotalAmount');

        const totalItems = this.items.reduce((sum, item) => sum + item.quantity, 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        if (cartCount) {
            cartCount.textContent = totalItems;
            if (totalItems > 0) {
                cartCount.classList.remove('cart-count-hidden');
            } else {
                cartCount.classList.add('cart-count-hidden');
            }
        }

        if (cartIcon && cartIconImg) {
            if (totalItems > 0) {
                cartIcon.classList.add('has-items');
                cartIconImg.src = 'images/icons/cart green.png';
            } else {
                cartIcon.classList.remove('has-items');
                cartIconImg.src = 'images/icons/cart gray.png';
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –≤–∫–ª—é—á–∞—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0)
        if (cartItemsList && cartTotalAmount) {
            cartItemsList.innerHTML = this.items.map(item => `
                <div class="cart-item" data-product-id="${item.id}">
                    <div class="cart-item-name">${item.name}</div>
                    <div class="cart-item-price">${this.formatNumber(item.price)} ‚Ç´</div>
                    <div class="cart-item-quantity">
                        <a href="#" class="quantity-btn">-</a>
                        <span>${item.quantity}</span>
                        <a href="#" class="quantity-btn">+</a>
                    </div>
                </div>
            `).join('');

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            this.updateTotalDisplay();
        }
    }

    async toggleCart() {
        if (this.items.length === 0) {
            this.showToast(this.t('cart_empty', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'), 'info');
            return;
        }
        await this.showCartModal();
    }

    async showCartModal() {
        this.populateCartModal();
        this.showModal();
        this.showGuestFields();
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (window.authSystem && window.authSystem.isAuthenticated) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!window.authSystem.userData) {
                console.log('üîÑ Loading user data for cart...');
                await window.authSystem.loadUserData();
            }
            
            if (window.authSystem.userData) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (firstname, lastname)
                if (!window.authSystem.userData.firstname || !window.authSystem.userData.lastname) {
                    console.log('üîÑ Loading full client data from Poster API...');
                    await this.loadClientDataFromPoster();
                }
                
                this.fillFieldsFromProfile(window.authSystem.userData);
                await this.checkAndApplyDiscount(window.authSystem.userData);
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
                this.tryFillFromStoredData();
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ localStorage, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            this.tryFillFromStoredData();
        }
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç Poster API (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
        await this.loadCurrentPricesFromPoster();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
        this.updateDiscountInfo();
    }

    showGuestFields() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≥–æ—Å—Ç—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        const guestFields = document.getElementById('guestInfoFields');
        if (guestFields) {
            guestFields.style.display = 'block';
        }
    }

    populateCartModal() {
        const cartItemsList = document.getElementById('cartItemsList');
        const cartTotalAmount = document.getElementById('cartTotalAmount');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        this.updateCartModalTranslations();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0
        const visibleItems = this.items.filter(item => item.quantity > 0);
        
        if (visibleItems.length === 0) {
            if (cartItemsList) {
                cartItemsList.innerHTML = `<p class="cart-empty-message">${this.t('cart_empty', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')}</p>`;
            }
            if (cartTotalAmount) {
                cartTotalAmount.textContent = '0 ‚Ç´';
            }
            return;
        }

        if (cartItemsList) {
            cartItemsList.innerHTML = visibleItems.map(item => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ cart-item-price
                const displayPrice = item.originalPrice || item.price;
                
                return `
                    <div class="cart-item" data-product-id="${item.id}">
                        <div class="cart-item-name">${item.name}</div>
                        <div class="cart-item-price">${this.formatNumber(displayPrice)} ‚Ç´</div>
                        <div class="cart-item-quantity">
                            <a href="#" class="quantity-btn">-</a>
                            <span>${item.quantity}</span>
                            <a href="#" class="quantity-btn">+</a>
                        </div>
                    </div>
                `;
            }).join('');
        }

        if (cartTotalAmount) {
            cartTotalAmount.textContent = `${this.formatNumber(this.getTotal())} ‚Ç´`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∫–æ—Ä–∑–∏–Ω—ã
    updateCartModalTranslations() {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö
        if (!this.translations || Object.keys(this.translations).length === 0) {
            console.log('üõí Cart: Translations not loaded yet, attempting to load...');
            this.loadTranslations().then(() => {
                console.log('üõí Cart: Translations loaded, retrying modal update');
                this.updateCartModalTranslations();
            }).catch(error => {
                console.error('üõí Cart: Failed to load translations:', error);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
                this.setDefaultTranslations();
                this.updateCartModalTranslations();
            });
            return;
        }
        
        console.log('üõí Cart: Updating cart modal translations with:', this.translations);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-translate
        const elementsToTranslate = document.querySelectorAll('[data-translate]');
        console.log('üõí Cart: Found', elementsToTranslate.length, 'elements to translate');
        
        elementsToTranslate.forEach((element, index) => {
            const key = element.getAttribute('data-translate');
            const translation = this.t(key);
            console.log(`üõí Cart: Element ${index}: '${key}' -> '${translation}' (current text: '${element.textContent}')`);
            if (translation && translation !== key) {
                element.textContent = translation;
                console.log(`üõí Cart: Updated element ${index} text to: '${element.textContent}'`);
            } else {
                console.warn(`üõí Cart: No translation found for key '${key}'`);
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ placeholder'—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-translate-placeholder
        const inputsToTranslate = document.querySelectorAll('[data-translate-placeholder]');
        console.log('üõí Cart: Found', inputsToTranslate.length, 'inputs to translate');
        
        inputsToTranslate.forEach(input => {
            const key = input.getAttribute('data-translate-placeholder');
            const translation = this.t(key);
            console.log(`üõí Cart: Translating placeholder '${key}' to '${translation}'`);
            if (translation && translation !== key) {
                input.placeholder = translation;
            }
        });
    }

    showModal() {
        const modal = document.getElementById('cartModal');
        const overlay = document.getElementById('modalOverlay');
        
        modal.classList.remove('modal-hidden');
        overlay.classList.remove('overlay-hidden');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        this.forceLoadTranslations();
        
        // Bind modal events
        this.bindModalEvents();
    }
    
    async forceLoadTranslations() {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if (!this.translations || Object.keys(this.translations).length === 0) {
            console.log('üõí Cart: Force loading translations for modal');
            await this.loadTranslations();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.updateCartModalTranslations();
    }

    hideModal() {
        const modal = document.getElementById('cartModal');
        const overlay = document.getElementById('modalOverlay');
        
        modal.classList.add('modal-hidden');
        overlay.classList.add('overlay-hidden');
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0 –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        this.cleanupZeroQuantityItems();
    }

    bindModalEvents() {
        // Close modal events
        document.getElementById('cartModalClose')?.addEventListener('click', () => {
            this.hideModal();
        });
        
        document.getElementById('cartModalCancel')?.addEventListener('click', () => {
            this.hideModal();
        });
        
        document.getElementById('modalOverlay')?.addEventListener('click', () => {
            this.hideModal();
        });

        // Order type change events
        document.querySelectorAll('input[name="orderType"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.toggleOrderFields(e.target.value);
            });
        });

        // Phone validation for unified phone field
        document.getElementById('customerPhone')?.addEventListener('input', (e) => {
            this.applyPhoneMask(e.target);
            this.validatePhone(e.target);
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ + –≤ –Ω–∞—á–∞–ª–µ
        document.getElementById('customerPhone')?.addEventListener('keydown', (e) => {
            if (e.target.selectionStart === 1 && e.key === 'Backspace') {
                e.preventDefault();
            }
        });

        // Delivery time validation
        document.getElementById('deliveryTime')?.addEventListener('change', (e) => {
            this.validateDeliveryTime(e.target);
        });

        // Submit order
        document.getElementById('cartModalSubmit')?.addEventListener('click', () => {
            this.submitOrder();
        });

        // Load tables when modal opens
        this.loadTables();
    }

    toggleOrderFields(orderType) {
        const tableFields = document.getElementById('tableOrderFields');
        const takeawayFields = document.getElementById('takeawayOrderFields');
        const deliveryFields = document.getElementById('deliveryOrderFields');
        const tableFieldGroup = document.getElementById('tableFieldGroup');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
        tableFields.style.display = 'none';
        takeawayFields.style.display = 'none';
        deliveryFields.style.display = 'none';
        
        if (orderType === 'table') {
            tableFields.style.display = 'block';
            tableFieldGroup.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ —Å—Ç–æ–ª–∞
        } else if (orderType === 'takeaway') {
            takeawayFields.style.display = 'block';
            tableFieldGroup.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ —Å—Ç–æ–ª–∞
        } else if (orderType === 'delivery') {
            deliveryFields.style.display = 'block';
            tableFieldGroup.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ —Å—Ç–æ–ª–∞
        }
    }

    async loadTables() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PHP API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤
            const response = await fetch('/api/tables.php');
            
            if (response.ok) {
                const data = await response.json();
                console.log('Tables loaded from MongoDB:', data);
                this.populateTableSelect(data.tables);
            } else {
                console.warn('Failed to load tables from MongoDB, using fallback');
                this.populateTableSelect([]);
            }
        } catch (error) {
            console.error('Error loading tables:', error);
            this.populateTableSelect([]);
        }
    }

    populateTableSelect(tables) {
        const select = document.getElementById('tableNumber');
        if (!select) return;

        // Clear existing options except the first one
        select.innerHTML = '<option value=""></option>';
        
        if (tables && tables.length > 0) {
            tables.forEach(table => {
                const option = document.createElement('option');
                option.value = table.table_id || table.id;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
                option.textContent = table.name || table.table_name || `–°—Ç–æ–ª ${table.table_id || table.id}`;
                select.appendChild(option);
            });
            console.log(`Loaded ${tables.length} tables from MongoDB`);
        } else {
            console.warn('No tables received from MongoDB');
            // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º fallback —Å—Ç–æ–ª—ã - —Ç–æ–ª—å–∫–æ –∏–∑ MongoDB
            const option = document.createElement('option');
            option.value = '';
            option.textContent = this.t('tables_not_found', '–°—Ç–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            option.disabled = true;
            select.appendChild(option);
        }
    }

    applyPhoneMask(input) {
        let value = input.value;
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º +
        if (value === '') {
            input.value = '+';
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +
        if (!value.startsWith('+')) {
            value = '+' + value.replace(/\D/g, '');
        } else {
            // –û—Å—Ç–∞–≤–ª—è–µ–º + –∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            value = '+' + value.substring(1).replace(/\D/g, '');
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∞—è +)
        if (value.length > 15) {
            value = value.substring(0, 15);
        }
        
        input.value = value;
    }

    validatePhone(input) {
        const phone = input.value;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä
        if (phone && (phone.length < 8 || !phone.startsWith('+'))) {
            input.setCustomValidity('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +–∫–æ–¥_—Å—Ç—Ä–∞–Ω—ã_–Ω–æ–º–µ—Ä');
        } else {
            input.setCustomValidity('');
        }
    }

    validateDeliveryTime(input) {
        const selectedTime = new Date(input.value);
        const now = new Date();
        const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000);
        
        if (selectedTime < oneHourFromNow) {
            input.setCustomValidity('–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ —á–∞—Å');
            this.showToast(this.t('delivery_time_too_soon', '–ú—ã –Ω–µ —É—Å–ø–µ–µ–º —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è!'), 'warning');
        } else {
            input.setCustomValidity('');
        }
    }

    validateOrderForm() {
        const orderType = document.querySelector('input[name="orderType"]:checked').value;
        
        // –û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        const name = document.getElementById('customerName').value.trim();
        const phone = document.getElementById('customerPhone').value.trim();
        
        if (!name) {
            this.showToast(this.t('enter_name', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'), 'error');
            this.highlightField('customerName');
            return false;
        }
        
        if (!phone) {
            this.showToast(this.t('enter_phone', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'), 'error');
            this.highlightField('customerPhone');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (phone.length < 8 || !phone.startsWith('+')) {
            this.showToast(this.t('enter_correct_phone', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'), 'error');
            this.highlightField('customerPhone');
            return false;
        }
        
        if (orderType === 'table') {
            const table = document.getElementById('tableNumber').value;
            
            if (!table) {
                this.showToast(this.t('select_table', '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞'), 'error');
                this.highlightField('tableNumber');
                return false;
            }
        } else if (orderType === 'takeaway') {
            // –î–ª—è –∑–∞–∫–∞–∑–∞ —Å —Å–æ–±–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        } else if (orderType === 'delivery') {
            const address = document.getElementById('deliveryAddress').value.trim();
            const deliveryTime = document.getElementById('deliveryTime').value;
            
            if (!address) {
                this.showToast(this.t('enter_address', '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'), 'error');
                this.highlightField('deliveryAddress');
                return false;
            }
            
            if (!deliveryTime) {
                this.showToast(this.t('select_delivery_time', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'), 'error');
                this.highlightField('deliveryTime');
                return false;
            }
        }
        
        return true;
    }

    async submitOrder() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        if (this.isSubmittingOrder) {
            console.log('‚ö†Ô∏è Order submission already in progress, ignoring duplicate request');
            return;
        }

        this.isSubmittingOrder = true;

        if (this.items.length === 0) {
            this.showToast(this.t('cart_empty', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'), 'error');
            this.isSubmittingOrder = false;
            return;
        }

        if (!this.validateOrderForm()) {
            this.isSubmittingOrder = false;
            return;
        }

        const orderType = document.querySelector('input[name="orderType"]:checked').value;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –µ–¥–∏–Ω—ã—Ö –ø–æ–ª–µ–π
        const name = document.getElementById('customerName').value.trim();
        const phone = document.getElementById('customerPhone').value.trim();
        
        const orderData = {
            spot_id: 1, // Default spot
            phone: phone, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            service_mode: orderType === 'table' ? 1 : (orderType === 'takeaway' ? 2 : 3), // 1 - –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏, 2 - –Ω–∞–≤—ã–Ω–æ—Å, 3 - –¥–æ—Å—Ç–∞–≤–∫–∞
            products: this.items.map(item => ({
                product_id: parseInt(item.id),
                count: item.quantity,
                price: Math.round(item.price * 100) // Convert to minor units (kopecks)
            })),
            comment: this.getOrderComment(orderType)
        };

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ client_id –≤ Poster
        if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
            try {
                const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : '';
                const response = await fetch(`${apiUrl}/api/proxy.php?path=poster/clients.getClients&phone=${encodeURIComponent(phone)}&token=${window.API_TOKEN}`);
                
                if (response.ok) {
                    const clientsData = await response.json();
                    if (clientsData && clientsData.length > 0) {
                        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        orderData.client_id = clientsData[0].client_id;
                        console.log('Found client_id:', orderData.client_id);
                        
                        // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã
                        // const openTransaction = await this.checkOpenTransactions(orderData.client_id);
                        // if (openTransaction) {
                        //     console.log('Found open transaction:', openTransaction);
                        //     // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
                        //     await this.addToExistingOrder(openTransaction.transaction_id);
                        //     return;
                        // }
                    }
                }
            } catch (error) {
                console.warn('Could not find client_id:', error);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º promotion_id –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞
        if (this.promotionId) {
            orderData.promotion_id = this.promotionId;
        }

        // –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—Ç–æ–ª–∏–∫ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å—Ç–æ–ª–∞
        if (orderType === 'table') {
            const tableSelect = document.getElementById('tableNumber');
            const selectedTableId = tableSelect.value;
            if (selectedTableId) {
                // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç (–∏–º—è —Å—Ç–æ–ª–∞)
                const selectedOption = tableSelect.options[tableSelect.selectedIndex];
                const tableName = selectedOption.text;
                
                // –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è —Å—Ç–æ–ª–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (Poster API –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å table_id)
                orderData.comment = orderData.comment.replace(/–°—Ç–æ–ª: \d+/, `–°—Ç–æ–ª: ${tableName}`);
            }
        }

        // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è
        if (orderType === 'delivery') {
            const address = document.getElementById('deliveryAddress').value.trim();
            const deliveryTime = document.getElementById('deliveryTime').value;
            
            if (address) {
                orderData.client_address = {
                    address1: address,
                    comment: '–ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏'
                };
            }
            
            if (deliveryTime) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS
                const date = new Date(deliveryTime);
                const formattedTime = date.getFullYear() + '-' + 
                    String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                    String(date.getDate()).padStart(2, '0') + ' ' + 
                    String(date.getHours()).padStart(2, '0') + ':' + 
                    String(date.getMinutes()).padStart(2, '0') + ':00';
                orderData.delivery_time = formattedTime;
            }
        }

        try {
            this.showToast(this.t('sending_order', '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑...'), 'info');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : '';
            const response = await fetch(`${apiUrl}/api/proxy.php?path=poster/orders/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-API-Token': window.API_TOKEN
                },
                body: JSON.stringify(orderData)
            });

            if (response.ok) {
                const result = await response.json();
                this.showToast(this.t('order_success', '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'), 'success');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
                this.saveCustomerData(name, phone);
                
                this.clearCart();
                this.hideModal();
                console.log('Order created:', result);
            } else {
                const error = await response.json();
                this.showToast(`${this.t('order_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞')}: ${error.message}`, 'error');
            }
        } catch (error) {
            console.error('Order submission error:', error);
            this.showToast(this.t('order_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞'), 'error');
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            this.isSubmittingOrder = false;
        }
    }

    getOrderComment(orderType) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const name = document.getElementById('customerName').value.trim();
        const phone = document.getElementById('customerPhone').value.trim();
        
        if (orderType === 'table') {
            const table = document.getElementById('tableNumber').value;
            const comment = document.getElementById('tableComment').value.trim();
            
            let commentText = `–ó–∞–∫–∞–∑ –Ω–∞ —Å—Ç–æ–ª–∏–∫. –ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}, –°—Ç–æ–ª: ${table}`;
            if (comment) {
                commentText += `. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            }
            return commentText;
        } else if (orderType === 'takeaway') {
            const comment = document.getElementById('takeawayComment').value.trim();
            
            let commentText = `–ó–∞–∫–∞–∑ —Å —Å–æ–±–æ–π. –ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
            if (comment) {
                commentText += `. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            }
            return commentText;
        } else if (orderType === 'delivery') {
            const address = document.getElementById('deliveryAddress').value.trim();
            const deliveryTime = document.getElementById('deliveryTime').value;
            const comment = document.getElementById('deliveryComment').value.trim();
            
            let commentText = `–ó–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ò–º—è: ${name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}, –ê–¥—Ä–µ—Å: ${address}, –í—Ä–µ–º—è: ${deliveryTime}`;
            if (comment) {
                commentText += `. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            }
            return commentText;
        }
    }

    highlightCart() {
        const cartIcon = document.getElementById('cartIcon');
        if (cartIcon) {
            cartIcon.classList.add('cart-highlight');
            setTimeout(() => {
                cartIcon.classList.remove('cart-highlight');
            }, 1000);
        }
    }

    clearCart() {
        this.items = [];
        this.saveCart();
        this.updateCartDisplay();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0 –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    cleanupZeroQuantityItems() {
        const initialLength = this.items.length;
        this.items = this.items.filter(item => item.quantity > 0);
        
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.items.length !== initialLength) {
            this.saveCart();
            this.updateCartDisplay();
        }
    }

    showAuthModal() {
        // Auth modal is now handled by AuthSystem in menu2.php
        // This method is no longer used
        console.log('Auth modal handled by AuthSystem');
    }

    fillFieldsFromProfile(userData) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∫–æ—Ä–∑–∏–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üîç fillFieldsFromProfile called with userData:', userData);
        
        const nameField = document.getElementById('customerName');
        const phoneField = document.getElementById('customerPhone');
        
        console.log('üîç Name field found:', !!nameField);
        console.log('üîç Phone field found:', !!phoneField);
        console.log('üîç userData.firstname:', userData.firstname);
        console.log('üîç userData.lastname:', userData.lastname);
        console.log('üîç userData.phone:', userData.phone);
        
        if (nameField && userData.firstname && userData.lastname) {
            const fullName = `${userData.firstname} ${userData.lastname}`.trim();
            nameField.value = fullName;
            console.log('‚úÖ Name field filled with:', fullName);
        } else if (nameField && userData.client_name) {
            nameField.value = userData.client_name;
            console.log('‚úÖ Name field filled with client_name:', userData.client_name);
        } else {
            console.log('‚ùå Name field not filled - missing data');
        }
        
        if (phoneField && userData.phone) {
            phoneField.value = userData.phone;
            console.log('‚úÖ Phone field filled with:', userData.phone);
        } else {
            console.log('‚ùå Phone field not filled - missing data');
        }
    }

    async loadCurrentPricesFromPoster() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Poster API
        try {
            if (this.items.length === 0) {
                console.log('üõí Cart is empty, no need to load prices');
                return;
            }
            
            console.log('üí∞ Loading current prices from Poster API...');
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (window.authSystem && window.authSystem.isAuthenticated && !window.authSystem.userData) {
                console.log('üîÑ Loading user data before price calculation...');
                await window.authSystem.loadUserData();
            }
            
            const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : 'https://veranda.my';
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ Poster API
            const productsResponse = await fetch(`${apiUrl}/api/proxy.php?path=menu`);
            
            if (productsResponse.ok) {
                const productsData = await productsResponse.json();
                console.log('üì• Products data from Poster API:', productsData);
                
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                console.log('üîç DEBUG: productsData type:', typeof productsData);
                console.log('üîç DEBUG: productsData is Array:', Array.isArray(productsData));
                console.log('üîç DEBUG: productsData keys:', productsData ? Object.keys(productsData) : 'null/undefined');
                console.log('üîç DEBUG: productsData value:', productsData);

                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º products, –∞ –Ω–µ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                const productsArray = productsData.products || productsData;

                console.log('üîç DEBUG: productsArray type:', typeof productsArray);
                console.log('üîç DEBUG: productsArray is Array:', Array.isArray(productsArray));

                if (!Array.isArray(productsArray)) {
                    console.error('‚ùå productsArray is not an array:', productsArray);
                    this.showToast(this.t('price_load_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤'), 'error');
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
                let pricesUpdated = false;
                this.items.forEach(item => {
                    console.log('üîç DEBUG: Looking for product ID:', item.id, 'in products array');
                    const productFromAPI = productsArray.find(p => p.product_id == item.id);
                    if (productFromAPI) {
                        console.log(`üîç Product ${item.name} (ID: ${item.id}) - API price:`, productFromAPI.price, 'Type:', typeof productFromAPI.price);
                        
                        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ Poster API
                        let priceValue = productFromAPI.price;
                        
                        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ - –æ–±—ä–µ–∫—Ç (—Ñ–æ—Ä–º–∞—Ç {"1":"7000000"}), –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if (typeof priceValue === 'object' && priceValue !== null) {
                            const keys = Object.keys(priceValue);
                            if (keys.length > 0) {
                                priceValue = priceValue[keys[0]]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ spot ID)
                                console.log(`üí∞ Extracted price from spot ${keys[0]}: ${priceValue}`);
                            } else {
                                priceValue = 0;
                            }
                        }
                        
                        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 (–∏–∑ –∫–æ–ø–µ–µ–∫ –≤ –¥–æ–Ω–≥–∏)
                        const rawPrice = parseFloat(priceValue);
                        const originalPrice = rawPrice / 100;
                        let newPrice = originalPrice;
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                        console.log('üîç Auth system check:', {
                            hasAuthSystem: !!window.authSystem,
                            isAuthenticated: window.authSystem?.isAuthenticated,
                            hasUserData: !!window.authSystem?.userData,
                            userData: window.authSystem?.userData
                        });
                        
                        if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
                            const clientDiscount = window.authSystem.userData.max_discount || 0;
                            console.log(`üéØ Client discount: ${clientDiscount}%`);
                            if (clientDiscount > 0) {
                                const discountAmount = originalPrice * (clientDiscount / 100);
                                newPrice = originalPrice - discountAmount;
                                console.log(`üéØ Applied ${clientDiscount}% discount to ${item.name}: ${originalPrice} -> ${newPrice}`);
                            } else {
                                console.log(`üéØ No discount applied to ${item.name} (discount: ${clientDiscount}%)`);
                            }
                        } else {
                            console.log(`üéØ No discount applied to ${item.name} (user not authenticated or no user data)`);
                        }
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        item.originalPrice = originalPrice;
                        
                        if (!isNaN(newPrice) && newPrice > 0) {
                            const oldPrice = item.price;
                            item.price = newPrice;
                            console.log(`üí∞ Price updated for ${item.name}: ${oldPrice} -> ${item.price}`);
                            pricesUpdated = true;
                        } else if (isNaN(newPrice) || newPrice <= 0) {
                            console.warn(`‚ö†Ô∏è Invalid price for ${item.name}:`, productFromAPI.price, `(extracted: ${priceValue}, parsed: ${newPrice})`);
                            // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
                        } else {
                            console.log(`‚úÖ Price for ${item.name} is already up to date: ${item.price}`);
                        }
                    } else {
                        console.warn(`‚ö†Ô∏è Product not found in API for ID: ${item.id}`);
                    }
                });
                
                if (pricesUpdated) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
                    this.saveCart();
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω –∏ –æ–±—â–µ–π —Å—É–º–º—ã
                    this.updateAllCartElements();
                    console.log('‚úÖ Cart prices updated from Poster API');
                } else {
                    console.log('‚úÖ All prices are up to date');
                }
            } else {
                console.error('‚ùå Failed to fetch products from Poster API:', productsResponse.statusText);
            }
        } catch (error) {
            console.error('‚ùå Error loading prices from Poster API:', error);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    getClientDiscount(clientData) {
        if (!clientData) return 0;
        
        const personalDiscount = parseFloat(clientData.discount_per || 0);
        const groupDiscount = parseFloat(clientData.client_groups_discount || 0);
        
        const maxDiscount = Math.max(personalDiscount, groupDiscount);
        console.log(`üéØ Client discounts - Personal: ${personalDiscount}%, Group: ${groupDiscount}%, Max: ${maxDiscount}%`);
        
        return maxDiscount;
    }

    async loadClientDataFromPoster() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Poster API
        try {
            const phone = window.authSystem.userData.phone;
            if (!phone) {
                console.log('‚ùå No phone number available for client lookup');
                return;
            }
            
            const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : '';
            const clientsResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/clients.getClients&phone=${encodeURIComponent(phone)}&token=${window.API_TOKEN}`);
            
            if (clientsResponse.ok) {
                const clientsData = await clientsResponse.json();
                if (clientsData && clientsData.length > 0) {
                    const clientData = clientsData[0];
                    console.log('üì• Full client data from Poster API:', clientData);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É
                    const maxDiscount = this.getClientDiscount(clientData);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    window.authSystem.userData = {
                        ...window.authSystem.userData,
                        firstname: clientData.firstname,
                        lastname: clientData.lastname,
                        client_name: clientData.client_name,
                        total_payed_sum: clientData.total_payed_sum || 0,
                        discount_per: clientData.discount_per || 0,
                        client_groups_discount: clientData.client_groups_discount || 0,
                        max_discount: maxDiscount
                    };
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    localStorage.setItem('user_client_data', JSON.stringify(clientData));
                    
                    console.log('‚úÖ Client data updated and cached');
                } else {
                    console.log('‚ùå No client found in Poster API');
                }
            } else {
                console.error('‚ùå Failed to fetch client data from Poster API:', clientsResponse.statusText);
            }
        } catch (error) {
            console.error('‚ùå Error loading client data from Poster API:', error);
        }
    }

    tryFillFromStoredData() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –∏–∑ localStorage (–¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        const nameField = document.getElementById('customerName');
        const phoneField = document.getElementById('customerPhone');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const storedName = localStorage.getItem('last_customer_name');
        const storedPhone = localStorage.getItem('last_customer_phone');
        
        if (nameField && storedName && !nameField.value) {
            nameField.value = storedName;
        }
        
        if (phoneField && storedPhone && !phoneField.value) {
            phoneField.value = storedPhone;
        }
    }

    saveCustomerData(name, phone) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ localStorage –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        if (name) {
            localStorage.setItem('last_customer_name', name);
        }
        if (phone) {
            localStorage.setItem('last_customer_phone', phone);
        }
    }

    async checkAndApplyDiscount(userData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
        const totalPaidSum = userData.total_payed_sum || 0;
        
        if (totalPaidSum === 0) {
            // –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞ - –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∫–∏–¥–∫—É
            this.showDiscountText(false);
        } else {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏
            this.showDiscountText(false);
        }
    }

    applyDiscount(promotionId, description) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –∫–æ—Ä–∑–∏–Ω–µ
        this.promotionId = promotionId;
        this.discountDescription = description;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        this.updateCartDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        if (description && description.trim() !== '') {
            this.showToast(description, 'info');
        }
    }

    showDiscountText(show) {
        // –£–¥–∞–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç discountText –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const oldDiscountText = document.getElementById('discountText');
        if (oldDiscountText) {
            oldDiscountText.remove();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∏–¥–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ –º–æ–¥–∞–ª–∫–∏
        const discountInfoElement = document.querySelector('.discount-info');
        
        if (discountInfoElement) {
            if (show) {
                discountInfoElement.style.display = 'block';
                discountInfoElement.style.backgroundColor = '#b88746ff';
            } else {
                discountInfoElement.style.display = 'none';
            }
        }
    }

    async checkOpenTransactions(clientId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
        try {
            const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : 'https://veranda.my';
            // –î–æ–±–∞–≤–ª—è–µ–º date_from –∏ date_to –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            const weekAgoStr = weekAgo.toISOString().split('T')[0]; // YYYY-MM-DD
            
            const response = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.getTransactions&client_id=${clientId}&date_from=${weekAgoStr}&date_to=${today}&token=${window.API_TOKEN}`, {
                method: 'GET',
                headers: {
                    'X-API-Token': window.API_TOKEN
                }
            });
            
            if (response.ok) {
                const transactions = await response.json();
                console.log('All transactions:', transactions);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
                if (Array.isArray(transactions)) {
                    // –ò—â–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã (date_close –ø—É—Å—Ç–æ–µ –∏–ª–∏ null)
                    const openTransaction = transactions.find(transaction => 
                        !transaction.date_close || transaction.date_close === '' || transaction.date_close === '0000-00-00 00:00:00'
                    );
                    
                    return openTransaction || null;
                } else if (transactions.error) {
                    console.warn('Poster API error:', transactions.message);
                    return null;
                }
            }
        } catch (error) {
            console.warn('Error checking open transactions:', error);
        }
        return null;
    }

    async addToExistingOrder(transactionId) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
        try {
            this.showToast(this.t('adding_to_existing_order', '–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É...'), 'info');
            
            const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3003' : 'https://veranda.my';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º total_payed_sum –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (window.authSystem && window.authSystem.isAuthenticated && window.authSystem.userData) {
                const phone = window.authSystem.userData.phone;
                if (phone) {
                    const clientsResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/clients.getClients&phone=${encodeURIComponent(phone)}&token=${window.API_TOKEN}`);
                    if (clientsResponse.ok) {
                        const clientsData = await clientsResponse.json();
                        if (clientsData && clientsData.length > 0) {
                            const clientData = clientsData[0];
                            const totalPaidSum = clientData.total_payed_sum || 0;
                            
                            // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (total_payed_sum = 0), –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
                            if (totalPaidSum === 0) {
                                const discountResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.changeFiscalStatus`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-API-Token': window.API_TOKEN
                                    },
                                    body: JSON.stringify({
                                        transaction_id: transactionId,
                                        fiscal_status: 1 // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 20%
                                    })
                                });
                                
                                if (discountResponse.ok) {
                                    console.log('‚úÖ Discount applied for new client in existing order');
                                } else {
                                    console.warn('Failed to apply discount to existing order');
                                }
                            }
                        }
                    }
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–∫–∞–∑–µ, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç–æ–ª–∏–∫
            const orderType = document.querySelector('input[name="orderType"]:checked').value;
            if (orderType === 'table') {
                const tableSelect = document.getElementById('tableNumber');
                const selectedTableId = tableSelect.value;
                if (selectedTableId) {
                    const selectedOption = tableSelect.options[tableSelect.selectedIndex];
                    const tableName = selectedOption.text;
                    const newComment = `–°—Ç–æ–ª: ${tableName}`;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ–ª–∞
                    const updateResponse = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.updateTransaction`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-API-Token': window.API_TOKEN
                        },
                        body: JSON.stringify({
                            transaction_id: transactionId,
                            comment: newComment
                        })
                    });
                    
                    if (updateResponse.ok) {
                        console.log('Table number updated in existing order');
                    } else {
                        console.warn('Failed to update table number in existing order');
                    }
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
            for (const item of this.items) {
                const response = await fetch(`${apiUrl}/api/proxy.php?path=poster/transactions.addTransactionProduct`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-Token': window.API_TOKEN
                    },
                    body: JSON.stringify({
                        transaction_id: transactionId,
                        product_id: parseInt(item.id),
                        count: item.quantity,
                        price: Math.round(item.price * 100) // Convert to minor units
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Failed to add product ${item.name} to transaction`);
                }
            }
            
            this.showToast(this.t('added_to_existing_order', '–¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É!'), 'success');
            this.clearCart();
            this.hideModal();
            
        } catch (error) {
            console.error('Error adding to existing order:', error);
            this.showToast(this.t('error_adding_to_existing_order', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∑–∞–∫–∞–∑—É'), 'error');
        }
    }

    showDiscountInfo() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        const cartTotal = document.querySelector('.cart-total');
        if (cartTotal) {
            const discountInfo = document.createElement('div');
            discountInfo.className = 'discount-info';
            // –°–∫–∏–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞
            discountInfo.style.display = 'none';
            cartTotal.appendChild(discountInfo);
        }
    }

    showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#b88746ff' : type === 'error' ? '#f44336' : type === 'warning' ? '#ff9800' : '#b88746ff'};
            color: white;
            padding: 12px 20px;
            border-radius: 4px;
            z-index: 10000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
}

// Initialize cart when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    window.cart = new Cart();
});
